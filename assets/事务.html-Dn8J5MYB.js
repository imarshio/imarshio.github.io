import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as l,d as a,e,f as d,b as n}from"./app-BseHs4it.js";const p={},c=n(`<p>MySQL 事务(<strong>Transaction</strong>)主要用于处理操作量大，复杂度高的数据。</p><p>比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><blockquote><ul><li>在 <code>MySQL</code> 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。MyISAM不支持事务。</li><li>事务处理可以用来维护数据库的<strong>完整性</strong>，保证成批的 <code>SQL</code> 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 <code>insert</code>,<code>update</code>,<code>delete</code> 语句</li></ul></blockquote><h3 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc"><span>MVCC</span></a></h3><blockquote><p>全称是<strong>M</strong>ulti<strong>V</strong>ersion <strong>C</strong>oncurrency <strong>C</strong>ontrol ，翻译过来就是多版本并发控制，一般用于数据库管理系统，实现对数据库的并发访问。</p></blockquote><h4 id="为什么需要" tabindex="-1"><a class="header-anchor" href="#为什么需要"><span>为什么需要</span></a></h4><blockquote><p>数据库通常使用锁来实现隔离性。最原生的锁，锁住该资源后会禁止其他任何线程访问该资源。</p><p>矛盾产生：大多数的业务场景是读多写少，而读锁之间的相互排斥就会显得不是很必要。</p><p>所以产生了读锁、写锁。读锁与读锁之间不互斥，写锁与读锁或写锁互斥。</p><p>之后由于业务场景再次升级，仅仅是读锁、写锁已经满足不了当时的业务场景，所以有了读锁与写锁不互斥的方法，就是在读取数据时将数据按照<strong>快照</strong>的方式保存下来，即 <code>MVCC</code>，这样读锁与写锁不在冲突。</p><p><strong>快照</strong>在不同的数据库有不同的实现方式。</p></blockquote><h4 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb"><span>InnoDB</span></a></h4><blockquote><p>上面说到，在 <code>MySQL</code>中只有 <code>InnoDB</code>支持事务，而在事务的四大隔离级别中又只有 <code>READ COMMITTED</code> 、<code>REPEATABLE READ</code>支持 <code>MVCC</code>，因为 <code>READ UNCOMMITTED</code> 的业务场景不符合 <code>MVCC</code>的业务场景，他只读取最新版本的数据，而 <code>SERIALIZABLE</code>会对所有的读取行加锁，不存在共享。</p></blockquote><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h4><p>// TODO</p><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h3><blockquote><p>事务需要满足四个条件，ACID</p><ul><li>原子性(Automatic):一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成.</li><li>一致性(Consistency):WAL(Write-Ahead Logging)</li><li>隔离性(Isolation):数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同的级别,包括读未提交,读已提交,可重复读,串行化.</li><li>持久性(Durablity):事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>在 <code>MySQL</code> 命令行的默认设置下，事务都是自动提交的，即执行 <code>SQL</code> 语句后就会马上执行 <code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN</code> 或 <code>START TRANSACTION</code>，或者执行命令 <code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。</p></blockquote><h3 id="begin" tabindex="-1"><a class="header-anchor" href="#begin"><span>BEGIN</span></a></h3><blockquote><p>开始一个事务,等同于 <code>START TRANSACTION</code>.</p></blockquote><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit"><span>COMMIT</span></a></h3><blockquote><p>提交一个事务,等同于 <code>COMMIT WORK</code>.</p></blockquote><h3 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback"><span>ROLLBACK</span></a></h3><blockquote><p>事务回滚,等同于 <code>ROLLBACK WORK</code>.</p><p><code>ROLLBACK TO identifier</code>,回滚到保存点.</p></blockquote><h3 id="savepoint" tabindex="-1"><a class="header-anchor" href="#savepoint"><span>SAVEPOINT</span></a></h3><blockquote><p><code>SAVEPOINT identifier</code>,在事务中创建一个保存点,在一个事务中可以有多个保存点.</p><p>可以利用保存点开启子事务,子事务失败进行回滚,而不影响主事务.</p></blockquote><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>RELEASE</span></a></h3><blockquote><p><code>RELEASE SAVEPOINT identifier</code> ,释放/删除一个保存点,</p></blockquote><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>SET</span></a></h3><blockquote><p><code>SET TRANSACTION</code>,设置事务隔离级别.</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 查看当前隔离级别</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span>

<span class="token comment"># 在事务开始之前设置此次事务会话的隔离级别</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token punctuation">(</span><span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token operator">/</span><span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token operator">/</span><span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token operator">/</span><span class="token keyword">SERIALIZABLE</span><span class="token punctuation">)</span>

<span class="token comment"># 设置全局事务默认的隔离级别</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token punctuation">(</span><span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token operator">/</span><span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token operator">/</span><span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token operator">/</span><span class="token keyword">SERIALIZABLE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><blockquote><p>事务在<strong>并发</strong>时可产生以下数据问题</p><ul><li><strong>脏读</strong></li><li><strong>不可重复读</strong></li><li><strong>幻读</strong></li><li><strong>第一类更新丢失</strong></li><li><strong>第二类更新丢失</strong></li></ul></blockquote><h4 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读"><span>脏读</span></a></h4><blockquote><p>指事务读取到了另一事务<strong>未提交的数据</strong>。 隔离级别为读未提交可产生脏读，可重复读，幻读。</p></blockquote><p>举个🌰</p><ul><li>事务A开启，进行读取数据。</li><li>事务B开启，修改数据，此时，事务B未提交。</li><li>事务A再次读取数据，读取到了B修改的数据。</li><li>事务B由于某种原因，进行了回滚。此时事务A读取到的数据就是脏数据，即脏读。</li></ul><h4 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h4><blockquote><p>指在一事务中，前后两次读取到的数据不一致。这里的不一致指的是某一<strong>数据的值</strong>前后发生了变化。强调的是<strong>一条或多条数据的值</strong>。</p></blockquote><p>举个🌰</p><ul><li>事务A开启，进行读取数据。</li><li>事务B开启，修改数据，提交。</li><li>事务A再次读取数据，读取到了B修改的数据，导致两次读取数据产生了差异，即不可重复读。</li></ul><h4 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h4><blockquote><p>指在一事务中，前后两次读取到的数据不一样。这里的不一样指的是<strong>数据集合</strong>的增减差异。强调的是<strong>数据集合</strong>。</p></blockquote><p>举个🌰</p><ul><li>事务A开启，进行读取数据。</li><li>事务B开启，新增数据，提交。</li><li>事务A再次读取数据，读取到了B新增的数据，导致两次读取到的数据集合不一样，即幻读。</li></ul><h4 id="第一类更新丢失" tabindex="-1"><a class="header-anchor" href="#第一类更新丢失"><span>第一类更新丢失</span></a></h4><blockquote><p>指两个事务都对数据进行更新，但是由于由于某种原因，其中一个事务进行了回滚，把事务B已提交的更新的数据给覆盖了。</p></blockquote><h4 id="第二类更新丢失" tabindex="-1"><a class="header-anchor" href="#第二类更新丢失"><span>第二类更新丢失</span></a></h4><blockquote><p>指两个事务都对数据进行更新，但是事务A的更新把已提交的事务B的更新数据给覆盖了。</p></blockquote><hr><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h3><blockquote><p>在 <code>MySQL</code>中,<code>InnoDB</code>存储引擎提供的事务隔离级别有四种，隔离级别由低到高为</p><ul><li>读未提交,<code>READ UNCOMMITTED</code></li><li>读已提交,<code>READ COMMITTED</code></li><li>可重复读,<code>REPEATABLE READ</code></li><li>串行读取,<code>SERIALIZABLE</code></li></ul><p>事务的隔离级别越高，越能保证数据的一致性完整性，但是执行效率也越低。</p><p><code>MySQL</code>默认启用的是可重复读。</p></blockquote><h4 id="读未提交" tabindex="-1"><a class="header-anchor" href="#读未提交"><span>读未提交</span></a></h4><blockquote><p>字面意思,在事务没提交的时候仍然可以读到更新后的数据,即该级别的事务对查询无影响.</p><p>由此会产生问题</p><ul><li>不可重复读，由于可读取到未提交的数据，前后两次读取到的数据不一致，产生不可重复读。</li><li>如果事务B因为某种原因进行了回滚，那么就会导致事务A的查询读到的数据为脏数据，即脏读。</li><li>同理，如果事务B进行的是新增操作，就会产生幻读。</li></ul></blockquote><p>举个🌰</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 开启事务前先查看数据库数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_student<span class="token punctuation">;</span>

<span class="token comment"># 1.设置事务A、B为读未提交的隔离级别，需要开启两个终端，set session指设置当前会话的隔离级别</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117100551.png#id=ape4e&amp;originHeight=377&amp;originWidth=1276&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 2.开启事务A、B</span>
<span class="token keyword">begin</span>
<span class="token comment">// 等同于命令 start transaction</span>

<span class="token comment"># 事务A查询，事务B修改数据</span>
<span class="token comment"># 事务A 查询</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_student<span class="token punctuation">;</span>
<span class="token comment"># 事务B 更新</span>
<span class="token keyword">update</span> db_student <span class="token keyword">set</span> stu_name <span class="token operator">=</span> <span class="token string">&#39;read uncommitted&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117101604.png#id=ifhUh&amp;originHeight=332&amp;originWidth=1230&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务A再次查询</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_student<span class="token punctuation">;</span>
<span class="token comment"># 两次查询结果值不一样，发生了不可重复读</span>

<span class="token comment"># 事务B回滚，提交</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>

<span class="token comment"># 结束事务后查询，事务A查询到的数据此时就是脏数据，即脏读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117102646.png#id=KTGCh&amp;originHeight=554&amp;originWidth=1288&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h4 id="读已提交" tabindex="-1"><a class="header-anchor" href="#读已提交"><span>读已提交</span></a></h4><blockquote><p>读取到的数据是事务提交之后的数据,这样就不会发生数据回滚对查询的结果造成了影响.</p><p>但是，此时会有另外一个问题，假设事务A正在执行隔离级别为读已提交的事务，事务A还未提交,还没有执行结束，此时，事务B对事务A查询的表进行了更新并提交了事务，但事务A没读到更新的数据,这就是不可重复读.</p></blockquote><p>举个🌰</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 开启事务前先查看数据库数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_student<span class="token punctuation">;</span>

<span class="token comment"># 1.设置事务A、B为读已提交的隔离级别，需要开启两个终端，set session指设置当前会话的隔离级别</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>

<span class="token comment"># 开启事务A、B</span>
<span class="token keyword">begin</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111848.png#id=FPruO&amp;originHeight=418&amp;originWidth=1292&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务A查询，事务B新增/修改，事务A查询</span>
<span class="token comment"># 可以看到暂时没有发生不可重复读，既如此，脏读也不会发生</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117110920.png#id=Hcu43&amp;originHeight=552&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务B提交，事务查询</span>
<span class="token comment"># 可以看到，发生了不可重复读，但是没有发生脏读，</span>
<span class="token comment"># 如果事务B进行的是新增操作，那么就会发生幻读，</span>
<span class="token comment"># 所以读已提交解决了脏读的问题，但是没有解决不可重复读以及幻读的问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111206.png#id=uEEge&amp;originHeight=547&amp;originWidth=1295&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h4 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读"><span>可重复读</span></a></h4><blockquote><p>可重复读指在事务中读取数据时,读的是进入事务时的快照,而不一定是当前版本的数据,因为可重复读使用了MVCC机制,select不会更新版本号,但是insert,update,delete会更新版本号,是当前读(最新版本的数据).</p><p>这样避免了不可重复读与幻读的问题,但是不能解决脏读的问题.</p></blockquote><p>举个🌰</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 开启事务前先查看数据库数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_student<span class="token punctuation">;</span>

<span class="token comment"># 1.设置事务A、B为读已提交的隔离级别，需要开启两个终端，set session指设置当前会话的隔离级别</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>

<span class="token comment"># 开启事务A、B</span>
<span class="token keyword">begin</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111838.png#id=fhQcC&amp;originHeight=384&amp;originWidth=1283&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务A查询，事务B修改/新增</span>
<span class="token comment"># 事务A查询</span>
<span class="token comment"># 没有发生不可重复读，没有发生脏读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117112223.png#id=oVRij&amp;originHeight=546&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务B提交，事务A查询</span>
<span class="token comment"># 没有发生不可重复读，</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117112406.png#id=qspxt&amp;originHeight=540&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 事务B新增，事务A更新事务B新增的数据，事务A查询</span>
<span class="token comment"># 出现了幻读，图片标注错误，说明可重复读并不会完全避免幻读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117123321.png#id=pK97l&amp;originHeight=555&amp;originWidth=1297&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h4 id="串行读取" tabindex="-1"><a class="header-anchor" href="#串行读取"><span>串行读取</span></a></h4><blockquote><p>事务级别为串行化读取时，在执行事务期间，事务会串行执行，也会锁表，因此不会出现幻读，但是并发性极低。唯一的并发就是操作不同的表时，可能会出现并发。</p></blockquote><p>举个🌰</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117123619.png#id=torz9&amp;originHeight=56&amp;originWidth=833&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,80),r={href:"https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_phantom",target:"_blank",rel:"noopener noreferrer"},m=n('<p>所以就没必要举例子了。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4><blockquote><p>事务隔离级别为读提交时,写数据会锁住相应的行.</p></blockquote><h4 id="隔离级别产生的问题" tabindex="-1"><a class="header-anchor" href="#隔离级别产生的问题"><span>隔离级别产生的问题</span></a></h4><table><thead><tr><th>隔离级别/产生的错误</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>第一类</th><th>第二类</th></tr></thead><tbody><tr><td>读未提交</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td></tr><tr><td>读已提交</td><td>❌</td><td>✔️</td><td>✔️</td><td></td><td></td></tr><tr><td>可重复读</td><td>❌</td><td>❌</td><td>✔️</td><td></td><td></td></tr><tr><td>串行化</td><td>❌</td><td>❌</td><td>❌</td><td></td><td></td></tr></tbody></table><h4 id="隔离级别解决的问题" tabindex="-1"><a class="header-anchor" href="#隔离级别解决的问题"><span>隔离级别解决的问题</span></a></h4><table><thead><tr><th>隔离级别/解决的错误</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>第一类</th><th>第二类</th></tr></thead><tbody><tr><td>读未提交</td><td>❌</td><td>❌</td><td>❌</td><td></td><td></td></tr><tr><td>读已提交</td><td>✔️</td><td>❌</td><td>❌</td><td></td><td></td></tr><tr><td>可重复读</td><td>✔️</td><td>✔️</td><td>❌</td><td></td><td></td></tr><tr><td>串行化</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td></tr></tbody></table>',7);function g(u,h){const s=i("ExternalLinkIcon");return o(),l("div",null,[c,a("p",null,[a("a",r,[e("官方"),d(s)]),e("文档说明，在所有的隔离级别中，幻读只有串行读取才能避免，在可重复读，读已提交，读未提交级别中都会出现。")]),m])}const y=t(p,[["render",g],["__file","事务.html.vue"]]),v=JSON.parse('{"path":"/posts/notes/MySQL/%E4%BA%8B%E5%8A%A1.html","title":"事务","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2021-03-17T00:00:00.000Z","order":9,"category":["mysql"],"title":"事务","description":"MySQL 事务(Transaction)主要用于处理操作量大，复杂度高的数据。 比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！ 在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。MyISAM不支持事务。 事务处理可...","head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/MySQL/%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"MySQL 事务(Transaction)主要用于处理操作量大，复杂度高的数据。 比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！ 在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。MyISAM不支持事务。 事务处理可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117100551.png#id=ape4e&originHeight=377&originWidth=1276&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-27T15:15:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"事务"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:published_time","content":"2021-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-27T15:15:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务\\",\\"image\\":[\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117100551.png#id=ape4e&originHeight=377&originWidth=1276&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117101604.png#id=ifhUh&originHeight=332&originWidth=1230&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117102646.png#id=KTGCh&originHeight=554&originWidth=1288&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111848.png#id=FPruO&originHeight=418&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117110920.png#id=Hcu43&originHeight=552&originWidth=1296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111206.png#id=uEEge&originHeight=547&originWidth=1295&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117111838.png#id=fhQcC&originHeight=384&originWidth=1283&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117112223.png#id=oVRij&originHeight=546&originWidth=1296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117112406.png#id=qspxt&originHeight=540&originWidth=1280&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117123321.png#id=pK97l&originHeight=555&originWidth=1297&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117123619.png#id=torz9&originHeight=56&originWidth=833&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\"],\\"datePublished\\":\\"2021-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-27T15:15:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":3,"title":"MVCC","slug":"mvcc","link":"#mvcc","children":[]},{"level":3,"title":"ACID","slug":"acid","link":"#acid","children":[]},{"level":3,"title":"BEGIN","slug":"begin","link":"#begin","children":[]},{"level":3,"title":"COMMIT","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"ROLLBACK","slug":"rollback","link":"#rollback","children":[]},{"level":3,"title":"SAVEPOINT","slug":"savepoint","link":"#savepoint","children":[]},{"level":3,"title":"RELEASE","slug":"release","link":"#release","children":[]},{"level":3,"title":"SET","slug":"set","link":"#set","children":[]},{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":3,"title":"事务隔离级别","slug":"事务隔离级别","link":"#事务隔离级别","children":[]}],"git":{"createdTime":1711552058000,"updatedTime":1711552514000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":2}]},"readingTime":{"minutes":10.19,"words":3058},"filePathRelative":"posts/notes/MySQL/事务.md","localizedDate":"March 17, 2021","excerpt":"<p>MySQL 事务(<strong>Transaction</strong>)主要用于处理操作量大，复杂度高的数据。</p>\\n<p>比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>\\n<blockquote>\\n<ul>\\n<li>在 <code>MySQL</code> 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。MyISAM不支持事务。</li>\\n<li>事务处理可以用来维护数据库的<strong>完整性</strong>，保证成批的 <code>SQL</code> 语句要么全部执行，要么全部不执行。</li>\\n<li>事务用来管理 <code>insert</code>,<code>update</code>,<code>delete</code> 语句</li>\\n</ul>\\n</blockquote>","autoDesc":true}');export{y as comp,v as data};
