import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,b as l}from"./app-BseHs4it.js";const a={},n=l('<p>设计模式是一套被多人只晓得，反复使用的，经过分类编目的，代码设计经验的总结。简单来说，设计模式就是具有一定的代码规范的前人总结的经验。使用设计模式是为了可重用代码，让代码更容易地被他人理解并且保证代码的可靠性。</p><h2 id="七大原则" tabindex="-1"><a class="header-anchor" href="#七大原则"><span>七大原则</span></a></h2><ul><li>开闭原则：对修改关闭，对扩展开放</li><li>里氏替换原则：在任何引用对象基类的地方都可以自由的调用其子类对象</li><li>依赖倒置原则：抽象不应该依赖于具体类，而具体类应该依赖于抽象</li><li>单一职责原则：一个类尽可能只负责一个功能领域中的职责，或者说只有一个因其他变化的原因</li><li>迪米特法则：也称最少知道原则，一个软件实体尽可能少的与其他实体发生相互作用</li><li>接口隔离原则：使用多个专门的接口，而不是使用单一的接口，即可用户端不应该依赖于那些它不需要的接口</li><li>合成复用原则：优先使用合成，次使用继承</li></ul><h2 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型"><span>创建型</span></a></h2><ul><li>简单工厂模式（Simple Factory Pattern）</li><li>工厂方法模式（Factory Method Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>生成器模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><p>简单工厂模式不属于23种设计模式</p><h2 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型"><span>结构型</span></a></h2><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰模式（Decorator Pattern）</li><li>外观模式（Façade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h2 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型"><span>行为型</span></a></h2><ul><li>解释器（Interpreter ）</li><li>模板方法（Template）</li><li>责任链（Chain of Responsibility）</li><li>命令（Command）</li><li>迭代器（Iterator）</li><li>中介者（Mediator）</li><li>备忘录（Memento）</li><li>观察者（Observer）</li><li>状态模式（Statue ）</li><li>策略模式（Strategy）</li><li>访问者模式（Visitor）</li></ul>',10),r=[n];function o(s,c){return e(),i("div",null,r)}const d=t(a,[["render",o],["__file","Design Patterns.html.vue"]]),m=JSON.parse('{"path":"/posts/notes/Base/Design%20Patterns.html","title":"Design Patterns","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2021-03-17T00:00:00.000Z","category":["Design Patterns"],"title":"Design Patterns","description":"设计模式是一套被多人只晓得，反复使用的，经过分类编目的，代码设计经验的总结。简单来说，设计模式就是具有一定的代码规范的前人总结的经验。使用设计模式是为了可重用代码，让代码更容易地被他人理解并且保证代码的可靠性。 七大原则 开闭原则：对修改关闭，对扩展开放 里氏替换原则：在任何引用对象基类的地方都可以自由的调用其子类对象 依赖倒置原则：抽象不应该依赖于具...","head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/Base/Design%20Patterns.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Design Patterns"}],["meta",{"property":"og:description","content":"设计模式是一套被多人只晓得，反复使用的，经过分类编目的，代码设计经验的总结。简单来说，设计模式就是具有一定的代码规范的前人总结的经验。使用设计模式是为了可重用代码，让代码更容易地被他人理解并且保证代码的可靠性。 七大原则 开闭原则：对修改关闭，对扩展开放 里氏替换原则：在任何引用对象基类的地方都可以自由的调用其子类对象 依赖倒置原则：抽象不应该依赖于具..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-27T15:07:38.000Z"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:published_time","content":"2021-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-27T15:07:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design Patterns\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-27T15:07:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":2,"title":"七大原则","slug":"七大原则","link":"#七大原则","children":[]},{"level":2,"title":"创建型","slug":"创建型","link":"#创建型","children":[]},{"level":2,"title":"结构型","slug":"结构型","link":"#结构型","children":[]},{"level":2,"title":"行为型","slug":"行为型","link":"#行为型","children":[]}],"git":{"createdTime":1711552058000,"updatedTime":1711552058000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":1}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"posts/notes/Base/Design Patterns.md","localizedDate":"March 17, 2021","excerpt":"<p>设计模式是一套被多人只晓得，反复使用的，经过分类编目的，代码设计经验的总结。简单来说，设计模式就是具有一定的代码规范的前人总结的经验。使用设计模式是为了可重用代码，让代码更容易地被他人理解并且保证代码的可靠性。</p>\\n<h2>七大原则</h2>\\n<ul>\\n<li>开闭原则：对修改关闭，对扩展开放</li>\\n<li>里氏替换原则：在任何引用对象基类的地方都可以自由的调用其子类对象</li>\\n<li>依赖倒置原则：抽象不应该依赖于具体类，而具体类应该依赖于抽象</li>\\n<li>单一职责原则：一个类尽可能只负责一个功能领域中的职责，或者说只有一个因其他变化的原因</li>\\n<li>迪米特法则：也称最少知道原则，一个软件实体尽可能少的与其他实体发生相互作用</li>\\n<li>接口隔离原则：使用多个专门的接口，而不是使用单一的接口，即可用户端不应该依赖于那些它不需要的接口</li>\\n<li>合成复用原则：优先使用合成，次使用继承</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
