import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DntpMp77.js";const p={},e=t(`<p>Transactional注解是我们日常开发中经常会用到的注解之一。</p><p>其中的参数都代表什么意义？通过这个项目我们一起来探索一下吧。</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p>首先我们先看一下Transactional注解都支持哪些参数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Transactional</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Alias for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">transactionManager</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">transactionManager</span></span>
     */</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;transactionManager&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * A <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>qualifier<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> value for the specified transaction.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>May be used to determine the target transaction manager, matching the
     * qualifier value (or the bean name) of a specific
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">TransactionManager</span></span> TransactionManager<span class="token punctuation">}</span>
     * bean definition.
     * <span class="token keyword">@since</span> 4.2
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">value</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">PlatformTransactionManager</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">ReactiveTransactionManager</span></span>
     */</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The transaction propagation type.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Propagation</span><span class="token punctuation">#</span><span class="token field">REQUIRED</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">TransactionAttribute</span><span class="token punctuation">#</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token class-name">Propagation</span> <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The transaction isolation level.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Isolation</span><span class="token punctuation">#</span><span class="token field">DEFAULT</span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Exclusively designed for use with <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Propagation</span><span class="token punctuation">#</span><span class="token field">REQUIRED</span></span><span class="token punctuation">}</span> or
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Propagation</span><span class="token punctuation">#</span><span class="token field">REQUIRES_NEW</span></span><span class="token punctuation">}</span> since it only applies to newly started
     * transactions. Consider switching the &quot;validateExistingTransactions&quot; flag to
     * &quot;true&quot; on your transaction manager if you&#39;d like isolation level declarations
     * to get rejected when participating in an existing transaction with a different
     * isolation level.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">TransactionAttribute</span><span class="token punctuation">#</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token field">setValidateExistingTransaction</span></span>
     */</span>
    <span class="token class-name">Isolation</span> <span class="token function">isolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The timeout for this transaction (in seconds).
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to the default timeout of the underlying transaction system.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Exclusively designed for use with <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Propagation</span><span class="token punctuation">#</span><span class="token field">REQUIRED</span></span><span class="token punctuation">}</span> or
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Propagation</span><span class="token punctuation">#</span><span class="token field">REQUIRES_NEW</span></span><span class="token punctuation">}</span> since it only applies to newly started
     * transactions.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">TransactionAttribute</span><span class="token punctuation">#</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * A boolean flag that can be set to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the transaction is
     * effectively read-only, allowing for corresponding optimizations at runtime.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This just serves as a hint for the actual transaction subsystem;
     * it will <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>not necessarily<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> cause failure of write access attempts.
     * A transaction manager which cannot interpret the read-only hint will
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> throw an exception when asked for a read-only transaction
     * but rather silently ignore the hint.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">TransactionAttribute</span><span class="token punctuation">#</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Defines zero (0) or more exception <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Class</span></span> classes<span class="token punctuation">}</span>, which must be
     * subclasses of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Throwable</span></span><span class="token punctuation">}</span>, indicating which exception types must cause
     * a transaction rollback.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>By default, a transaction will be rolling back on <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuntimeException</span></span><span class="token punctuation">}</span>
     * and <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Error</span></span><span class="token punctuation">}</span> but not on checked exceptions (business exceptions). See
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * for a detailed explanation.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is the preferred way to construct a rollback rule (in contrast to
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">rollbackForClassName</span></span><span class="token punctuation">}</span>), matching the exception class and its subclasses.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Similar to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">RollbackRuleAttribute</span><span class="token punctuation">#</span><span class="token function">RollbackRuleAttribute</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">rollbackForClassName</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Defines zero (0) or more exception names (for exceptions which must be a
     * subclass of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Throwable</span></span><span class="token punctuation">}</span>), indicating which exception types must cause
     * a transaction rollback.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This can be a substring of a fully qualified class name, with no wildcard
     * support at present. For example, a value of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;ServletException&quot;</span></span></span><span class="token punctuation">}</span> would
     * match <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span></span></span><span class="token punctuation">}</span> and its subclasses.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>NB:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> Consider carefully how specific the pattern is and whether
     * to include package information (which isn&#39;t mandatory). For example,
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;Exception&quot;</span></span></span><span class="token punctuation">}</span> will match nearly anything and will probably hide other
     * rules. <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;java.lang.Exception&quot;</span></span></span><span class="token punctuation">}</span> would be correct if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;Exception&quot;</span></span></span><span class="token punctuation">}</span>
     * were meant to define a rule for all checked exceptions. With more unusual
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Exception</span></span><span class="token punctuation">}</span> names such as <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;BaseBusinessException&quot;</span></span></span><span class="token punctuation">}</span> there is no
     * need to use a FQN.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Similar to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">RollbackRuleAttribute</span><span class="token punctuation">#</span><span class="token function">RollbackRuleAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> exceptionName<span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">rollbackFor</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Defines zero (0) or more exception <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Class</span></span> Classes<span class="token punctuation">}</span>, which must be
     * subclasses of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Throwable</span></span><span class="token punctuation">}</span>, indicating which exception types must
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> cause a transaction rollback.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is the preferred way to construct a rollback rule (in contrast
     * to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">noRollbackForClassName</span></span><span class="token punctuation">}</span>), matching the exception class and
     * its subclasses.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Similar to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">#</span><span class="token function">NoRollbackRuleAttribute</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">noRollbackForClassName</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Defines zero (0) or more exception names (for exceptions which must be a
     * subclass of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Throwable</span></span><span class="token punctuation">}</span>) indicating which exception types must <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
     * cause a transaction rollback.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>See the description of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">rollbackForClassName</span></span><span class="token punctuation">}</span> for further
     * information on how the specified names are treated.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Similar to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">#</span><span class="token function">NoRollbackRuleAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> exceptionName<span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">noRollbackFor</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解读" tabindex="-1"><a class="header-anchor" href="#解读"><span>解读</span></a></h2><table><thead><tr><th>参数</th><th>默认值</th><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td>value</td><td>&quot;&quot;</td><td>-</td><td>等同于transactionManager</td></tr><tr><td>transactionManager</td><td>&quot;&quot;</td><td>-</td><td>determine the target transaction manager</td></tr><tr><td>propagation</td><td>Propagation.REQUIRED</td><td>Propagation.*</td><td>事务传播方式</td></tr><tr><td>isolation</td><td>Isolation.DEFAULT</td><td>Isolation.*</td><td>事务隔离级别</td></tr><tr><td>timeout</td><td>TransactionDefinition.TIMEOUT_DEFAULT</td><td>TransactionDefinition.*</td><td>事务超时时间</td></tr><tr><td>readOnly</td><td>false</td><td>true、false</td><td>事务只读属性</td></tr><tr><td>rollbackFor</td><td>{}</td><td>Class&lt;? extends Throwable&gt;</td><td>指定遇到哪些Throwable类进行回滚</td></tr><tr><td>rollbackForClassName</td><td>{}</td><td>String[]</td><td>指定遇到哪些类名进行回滚</td></tr><tr><td>noRollbackFor</td><td>{}</td><td>Class&lt;? extends Throwable&gt;</td><td>指定遇到哪些类不进行回滚</td></tr><tr><td>noRollbackForClassName</td><td>{}</td><td>String[]</td><td>指定遇到哪些类名不进行回滚</td></tr></tbody></table><h2 id="rollbackfor" tabindex="-1"><a class="header-anchor" href="#rollbackfor"><span>rollbackFor</span></a></h2><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>Defines zero (0) or more exception classes, which must be subclasses of Throwable, indicating which exception types must cause a transaction rollback.
By default, a transaction will be rolling back on RuntimeException and Error but not on checked exceptions (business exceptions). See org.springframework.transaction.interceptor.DefaultTransactionAttribute.rollbackOn(Throwable) for a detailed explanation.
This is the preferred way to construct a rollback rule (in contrast to rollbackForClassName), matching the exception class and its subclasses.
Similar to org.springframework.transaction.interceptor.RollbackRuleAttribute.RollbackRuleAttribute(Class clazz).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持定义当service的方法被调用时（代理），抛出哪些Throwable及其子类才会进行回滚。默认情况只会对RuntimeException及其子类进行回滚，对Exception子类但非RuntimeException的子类不进行回滚。如果指定了RuntimeException范围外的类，那么则支持对指定类及其子类进行回滚，如指定<code>@Transactional(rollbackFor = Exception.class)</code>就会对所有的<code>Exception</code>及其子类进行回滚。</p><p>但是当异常被catch吞掉之后，即使抛出异常也不会回顾。</p><p>动手动手</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>marshio<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> marshio
 * <span class="token keyword">@desc</span> Transactional注解的使用，
 * 注意：这里我没有使用IService，而是直接使用了Service
 * <span class="token keyword">@create</span> 2023-12-26 16:33
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionMapper</span> mapper<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TransactionalService</span><span class="token punctuation">(</span><span class="token class-name">TransactionMapper</span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">rollback1</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ma&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;mashuo@shenqingtech.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> insert <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// true 执行，报错 ArithmeticException，回滚</span>
            <span class="token comment">// false 不执行，不报错 ，不回滚</span>
            <span class="token comment">// throw new ClassCastException();</span>
            <span class="token keyword">return</span> insert <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">rollback2</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zwl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;zwl@shenqingtech.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> insert <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// flag==true ,执行, 报错 ArithmeticException/ClassCastException 回滚</span>
            <span class="token comment">// flag==false ,不执行，不报错，不回滚</span>
            <span class="token comment">// throw new ClassCastException(&quot;回滚！&quot;);</span>
            <span class="token keyword">return</span> insert <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">rollback3</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BusinessException</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zwl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;zwl@shenqingtech.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> insert <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// flag==true ,不执行</span>
            <span class="token comment">// flag==false ,执行，报错 ArithmeticException 回滚</span>
            <span class="token keyword">return</span> insert <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// flag==true ,执行，报错BusinessException，回滚</span>
            <span class="token comment">// flag==false ,不执行</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;回滚&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">rollback4</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BusinessException</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ma&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        entity<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;mashuo@shenqingtech.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> insert <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// flag==true ,不执行</span>
            <span class="token comment">// flag==false ,执行，报错 ArithmeticException 回滚</span>
            <span class="token keyword">return</span> insert <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// flag==true ,执行，报错 BusinessException，不回滚</span>
            <span class="token comment">// flag==false ,不执行</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不回滚&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图有待验证，以及特殊案例有待补充，但是其原理可以参考下面的<strong>原理</strong>章节</p><table><thead><tr><th>rollbackFor</th><th>Throwable</th><th>rollback</th></tr></thead><tbody><tr><td>Throwable.class</td><td>*</td><td>YES</td></tr><tr><td>Exception.class</td><td>Exception &amp; ExceptionSubClasses &amp; Error &amp; ErrorSubClasses</td><td>YES</td></tr><tr><td>Error.class</td><td>Error &amp; ErrorSubClasses &amp; RuntimeException &amp; RuntimeExceptionSubClasses</td><td>YES</td></tr><tr><td>Exception.class</td><td>Error &amp; ErrorSubClasses</td><td>NO</td></tr><tr><td>Error.class</td><td>Exception &amp; ExceptionSubClasses</td><td>NO</td></tr><tr><td>Default(RuntimeException)</td><td>RuntimeException &amp; RuntimeExceptionSubClasses</td><td>YES</td></tr><tr><td>RuntimeException.class</td><td>RuntimeException &amp; RuntimeExceptionSubClasses</td><td>YES</td></tr><tr><td>RuntimeException.class</td><td>Exception</td><td>NO</td></tr><tr><td>ArithmeticException.class</td><td>RuntimeException &amp; RuntimeExceptionSubClasses</td><td>YES</td></tr><tr><td>RuntimeException.class</td><td>! (RuntimeException &amp; RuntimeExceptionSubClasses)</td><td>NO</td></tr></tbody></table><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>判断这个类要不要回滚的方法实现为<code>org.springframework.transaction.interceptor.DefaultTransactionAttribute.rollbackOn(Throwable)</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionAttribute</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>

 <span class="token doc-comment comment">/**
  * Return a qualifier value associated with this transaction attribute.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This may be used for choosing a corresponding transaction manager
  * to process this specific transaction.
  * <span class="token keyword">@since</span> 3.0
  */</span>
 <span class="token annotation punctuation">@Nullable</span>
 <span class="token class-name">String</span> <span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token doc-comment comment">/**
  * Should we roll back on the given exception?
  * <span class="token keyword">@param</span> <span class="token parameter">ex</span> the exception to evaluate
  * <span class="token keyword">@return</span> whether to perform a rollback or not
  */</span>
 <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionAttribute</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultTransactionDefinition</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionAttribute</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     *省略上下文
     */</span>
    
    <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ex为运行时异常或Error时回滚</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span> <span class="token operator">||</span> ex <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token punctuation">}</span>




<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleBasedTransactionAttribute</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultTransactionAttribute</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     *省略上下文
     */</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Applying rules to determine whether transaction should rollback on &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">RollbackRuleAttribute</span> winner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> deepest <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollbackRules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RollbackRuleAttribute</span> rule <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rollbackRules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 判断</span>
    <span class="token keyword">int</span> depth <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> depth <span class="token operator">&lt;</span> deepest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     deepest <span class="token operator">=</span> depth<span class="token punctuation">;</span>
                    <span class="token comment">// 只有是定义的可抛出异常类及其子类的时候，才会给winnner赋值为rule</span>
     winner <span class="token operator">=</span> rule<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Winning rollback rule is: &quot;</span> <span class="token operator">+</span> winner<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// User superclass behavior (rollback on unchecked) if no rule matches.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No relevant rollback rule found: applying default rules&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

        <span class="token comment">// 判断抛出的异常类是否为NoRollbackRuleAttribute（定义的不回滚类，与rollbackFor功能相反）</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>winner <span class="token keyword">instanceof</span> <span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RollbackRuleAttribute</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * exceptionClass： 方法实际抛出的异常
     * 找抛出的异常类和定义的可抛出异常类的层级关系，如果是子类，那么depth就是正数，如果刚好是定义的可抛出异常类，那么depth就是0，如果不是子类，那么depth就是-1
     */</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exceptionClass<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this.exceptionName：期望的异常类名，即rollbackFor定义的类名</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Found it!</span>
   <span class="token keyword">return</span> depth<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// If we&#39;ve gone as far as we can go and haven&#39;t found it...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionClass <span class="token operator">==</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>exceptionClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="个人好奇" tabindex="-1"><a class="header-anchor" href="#个人好奇"><span>个人好奇</span></a></h3><p>为什么在debug的过程中，<code>rollbackOn</code>会调用<code>RuleBasedTransactionAttribute</code>类的实现，为什么会好奇呢？因为<code>RuleBasedTransactionAttribute</code>的父类为<code>DefaultTransactionAttribute</code>，但是他的实现除了<code>RuleBasedTransactionAttribute</code>之外还有一个<code>Ejb3TransactionAnnotationParser</code>，为什么不是调用<code>Ejb3TransactionAnnotationParser</code>的实现呢？</p><p><code>Ejb3TransactionAnnotationParser</code>： Enterprise java bean 3.0 事务注解解析</p><p>我在跟踪断点的过程中发现如下代码（第34行代码）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAspectSupport</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Nullable</span>
 <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">,</span>
   <span class="token keyword">final</span> <span class="token class-name">InvocationCallback</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

  <span class="token comment">// If the transaction attribute is null, the method is non-transactional.</span>
  <span class="token class-name">TransactionAttributeSource</span> tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">TransactionAttribute</span> txAttr <span class="token operator">=</span> <span class="token punctuation">(</span>tas <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">TransactionManager</span> tm <span class="token operator">=</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reactiveAdapterRegistry <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tm <span class="token keyword">instanceof</span> <span class="token class-name">ReactiveTransactionManager</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">ReactiveTransactionSupport</span> txSupport <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionSupportCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KotlinDetector</span><span class="token punctuation">.</span><span class="token function">isKotlinType</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">KotlinDelegate</span><span class="token punctuation">.</span><span class="token function">isSuspend</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionUsageException</span><span class="token punctuation">(</span>
       <span class="token string">&quot;Unsupported annotated transaction on suspending function detected: &quot;</span> <span class="token operator">+</span> method <span class="token operator">+</span>
       <span class="token string">&quot;. Use TransactionalOperator.transactional extensions instead.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ReactiveAdapter</span> adapter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reactiveAdapterRegistry<span class="token punctuation">.</span><span class="token function">getAdapter</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot apply reactive transaction to non-reactive return type: &quot;</span> <span class="token operator">+</span>
       method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveTransactionSupport</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> txSupport<span class="token punctuation">.</span><span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>
     method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> invocation<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ReactiveTransactionManager</span><span class="token punctuation">)</span> tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">PlatformTransactionManager</span> ptm <span class="token operator">=</span> <span class="token function">asPlatformTransactionManager</span><span class="token punctuation">(</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> joinpointIdentification <span class="token operator">=</span> <span class="token function">methodIdentification</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>ptm <span class="token keyword">instanceof</span> <span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span>
   <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>ptm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is an around advice: Invoke the next interceptor in the chain.</span>
    <span class="token comment">// This will normally result in a target object being invoked.</span>
    retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// target invocation exception</span>
    <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> vavrPresent <span class="token operator">&amp;&amp;</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">isVavrTry</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set rollback-only in case of Vavr failure matching our rollback rules...</span>
    <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     retVal <span class="token operator">=</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">evaluateTryFailure</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
   <span class="token keyword">final</span> <span class="token class-name">ThrowableHolder</span> throwableHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// It&#39;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span> ptm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">,</span> status <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>ptm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> vavrPresent <span class="token operator">&amp;&amp;</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">isVavrTry</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// Set rollback-only in case of Vavr failure matching our rollback rules...</span>
       retVal <span class="token operator">=</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">evaluateTryFailure</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// A RuntimeException: will lead to a rollback.</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> ex<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolderException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token comment">// A normal return value: will lead to a commit.</span>
       throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThrowableHolderException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
     ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// Check result state: It might indicate a Throwable to rethrow.</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续跟进</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAspectSupport</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">TransactionInfo</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PlatformTransactionManager</span> tm<span class="token punctuation">,</span>
                                                           <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionAttribute</span> txAttr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> joinpointIdentification<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// If no name specified, apply method identification as transaction name.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txAttr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            txAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingTransactionAttribute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> joinpointIdentification<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Skipping transactional joinpoint [&quot;</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>
                            <span class="token string">&quot;] because no transaction manager has been configured&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="propagation" tabindex="-1"><a class="header-anchor" href="#propagation"><span>propagation</span></a></h2><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>The transaction propagation type.
Defaults to Propagation.REQUIRED.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务嵌套" tabindex="-1"><a class="header-anchor" href="#事务嵌套"><span>事务嵌套</span></a></h2><h2 id="事务传播" tabindex="-1"><a class="header-anchor" href="#事务传播"><span>事务传播</span></a></h2><h2 id="事务级联" tabindex="-1"><a class="header-anchor" href="#事务级联"><span>事务级联</span></a></h2>`,32),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Transaction.html.vue"]]),d=JSON.parse(`{"path":"/posts/notes/Transaction.html","title":"Transactional Usage","lang":"en-US","frontmatter":{"lang":"en-US","title":"Transactional Usage","description":"虚心接受自己的不足，然后找机会与时间去弥补自己的不足，你会慢慢体会到高处不胜寒的感觉。","tags":null,"head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/Transaction.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Transactional Usage"}],["meta",{"property":"og:description","content":"虚心接受自己的不足，然后找机会与时间去弥补自己的不足，你会慢慢体会到高处不胜寒的感觉。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-20T14:11:41.000Z"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:modified_time","content":"2024-03-20T14:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Transactional Usage\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T14:11:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":2,"title":"源码","slug":"源码","link":"#源码","children":[]},{"level":2,"title":"解读","slug":"解读","link":"#解读","children":[]},{"level":2,"title":"rollbackFor","slug":"rollbackfor","link":"#rollbackfor","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"个人好奇","slug":"个人好奇","link":"#个人好奇","children":[]}]},{"level":2,"title":"propagation","slug":"propagation","link":"#propagation","children":[{"level":3,"title":"用法","slug":"用法-1","link":"#用法-1","children":[]}]},{"level":2,"title":"事务嵌套","slug":"事务嵌套","link":"#事务嵌套","children":[]},{"level":2,"title":"事务传播","slug":"事务传播","link":"#事务传播","children":[]},{"level":2,"title":"事务级联","slug":"事务级联","link":"#事务级联","children":[]}],"git":{"createdTime":1710943901000,"updatedTime":1710943901000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":1}]},"readingTime":{"minutes":8.62,"words":2587},"filePathRelative":"posts/notes/Transaction.md","localizedDate":"March 20, 2024","excerpt":"<p>Transactional注解是我们日常开发中经常会用到的注解之一。</p>\\n<p>其中的参数都代表什么意义？通过这个项目我们一起来探索一下吧。</p>\\n<h2>源码</h2>\\n<p>首先我们先看一下Transactional注解都支持哪些参数</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token annotation punctuation\\">@Target</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">ElementType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TYPE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ElementType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">METHOD</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@Retention</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RetentionPolicy</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">RUNTIME</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@Inherited</span>\\n<span class=\\"token annotation punctuation\\">@Documented</span>\\n<span class=\\"token annotation punctuation\\">@SuppressWarnings</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token annotation punctuation\\">@interface</span> <span class=\\"token class-name\\">Transactional</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Alias for <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">transactionManager</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">transactionManager</span></span>\\n     */</span>\\n    <span class=\\"token annotation punctuation\\">@AliasFor</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"transactionManager\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * A <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>em</span><span class=\\"token punctuation\\">&gt;</span></span>qualifier<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>em</span><span class=\\"token punctuation\\">&gt;</span></span> value for the specified transaction.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>May be used to determine the target transaction manager, matching the\\n     * qualifier value (or the bean name) of a specific\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionManager</span></span> TransactionManager<span class=\\"token punctuation\\">}</span>\\n     * bean definition.\\n     * <span class=\\"token keyword\\">@since</span> 4.2\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">value</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">PlatformTransactionManager</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ReactiveTransactionManager</span></span>\\n     */</span>\\n    <span class=\\"token annotation punctuation\\">@AliasFor</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"value\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">transactionManager</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * The transaction propagation type.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Defaults to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">REQUIRED</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">getPropagationBehavior</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">Propagation</span> <span class=\\"token function\\">propagation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">REQUIRED</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * The transaction isolation level.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Defaults to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Isolation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">DEFAULT</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Exclusively designed for use with <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">REQUIRED</span></span><span class=\\"token punctuation\\">}</span> or\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">REQUIRES_NEW</span></span><span class=\\"token punctuation\\">}</span> since it only applies to newly started\\n     * transactions. Consider switching the \\"validateExistingTransactions\\" flag to\\n     * \\"true\\" on your transaction manager if you'd like isolation level declarations\\n     * to get rejected when participating in an existing transaction with a different\\n     * isolation level.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">getIsolationLevel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>support<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">AbstractPlatformTransactionManager</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">setValidateExistingTransaction</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">Isolation</span> <span class=\\"token function\\">isolation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token class-name\\">Isolation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DEFAULT</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * The timeout for this transaction (in seconds).\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Defaults to the default timeout of the underlying transaction system.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Exclusively designed for use with <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">REQUIRED</span></span><span class=\\"token punctuation\\">}</span> or\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">REQUIRES_NEW</span></span><span class=\\"token punctuation\\">}</span> since it only applies to newly started\\n     * transactions.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">getTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">timeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token class-name\\">TransactionDefinition</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TIMEOUT_DEFAULT</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * A boolean flag that can be set to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if the transaction is\\n     * effectively read-only, allowing for corresponding optimizations at runtime.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Defaults to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>This just serves as a hint for the actual transaction subsystem;\\n     * it will <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>i</span><span class=\\"token punctuation\\">&gt;</span></span>not necessarily<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>i</span><span class=\\"token punctuation\\">&gt;</span></span> cause failure of write access attempts.\\n     * A transaction manager which cannot interpret the read-only hint will\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>i</span><span class=\\"token punctuation\\">&gt;</span></span>not<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>i</span><span class=\\"token punctuation\\">&gt;</span></span> throw an exception when asked for a read-only transaction\\n     * but rather silently ignore the hint.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">isReadOnly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>support<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TransactionSynchronizationManager</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">isCurrentTransactionReadOnly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">readOnly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Defines zero (0) or more exception <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Class</span></span> classes<span class=\\"token punctuation\\">}</span>, which must be\\n     * subclasses of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Throwable</span></span><span class=\\"token punctuation\\">}</span>, indicating which exception types must cause\\n     * a transaction rollback.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>By default, a transaction will be rolling back on <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">RuntimeException</span></span><span class=\\"token punctuation\\">}</span>\\n     * and <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Error</span></span><span class=\\"token punctuation\\">}</span> but not on checked exceptions (business exceptions). See\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DefaultTransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rollbackOn</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>\\n     * for a detailed explanation.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>This is the preferred way to construct a rollback rule (in contrast to\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">rollbackForClassName</span></span><span class=\\"token punctuation\\">}</span>), matching the exception class and its subclasses.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Similar to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">RollbackRuleAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">RollbackRuleAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Class</span> clazz<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">rollbackForClassName</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DefaultTransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rollbackOn</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">rollbackFor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Defines zero (0) or more exception names (for exceptions which must be a\\n     * subclass of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Throwable</span></span><span class=\\"token punctuation\\">}</span>), indicating which exception types must cause\\n     * a transaction rollback.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>This can be a substring of a fully qualified class name, with no wildcard\\n     * support at present. For example, a value of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"ServletException\\"</span></span></span><span class=\\"token punctuation\\">}</span> would\\n     * match <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span></span>ServletException</span></span></span><span class=\\"token punctuation\\">}</span> and its subclasses.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>b</span><span class=\\"token punctuation\\">&gt;</span></span>NB:<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>b</span><span class=\\"token punctuation\\">&gt;</span></span> Consider carefully how specific the pattern is and whether\\n     * to include package information (which isn't mandatory). For example,\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"Exception\\"</span></span></span><span class=\\"token punctuation\\">}</span> will match nearly anything and will probably hide other\\n     * rules. <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"java.lang.Exception\\"</span></span></span><span class=\\"token punctuation\\">}</span> would be correct if <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"Exception\\"</span></span></span><span class=\\"token punctuation\\">}</span>\\n     * were meant to define a rule for all checked exceptions. With more unusual\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Exception</span></span><span class=\\"token punctuation\\">}</span> names such as <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"BaseBusinessException\\"</span></span></span><span class=\\"token punctuation\\">}</span> there is no\\n     * need to use a FQN.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Similar to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">RollbackRuleAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">RollbackRuleAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> exceptionName<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">rollbackFor</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DefaultTransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rollbackOn</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">rollbackForClassName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Defines zero (0) or more exception <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Class</span></span> Classes<span class=\\"token punctuation\\">}</span>, which must be\\n     * subclasses of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Throwable</span></span><span class=\\"token punctuation\\">}</span>, indicating which exception types must\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>b</span><span class=\\"token punctuation\\">&gt;</span></span>not<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>b</span><span class=\\"token punctuation\\">&gt;</span></span> cause a transaction rollback.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>This is the preferred way to construct a rollback rule (in contrast\\n     * to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">noRollbackForClassName</span></span><span class=\\"token punctuation\\">}</span>), matching the exception class and\\n     * its subclasses.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Similar to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">NoRollbackRuleAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">NoRollbackRuleAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Class</span> clazz<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">noRollbackForClassName</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DefaultTransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rollbackOn</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">noRollbackFor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Defines zero (0) or more exception names (for exceptions which must be a\\n     * subclass of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Throwable</span></span><span class=\\"token punctuation\\">}</span>) indicating which exception types must <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>b</span><span class=\\"token punctuation\\">&gt;</span></span>not<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>b</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * cause a transaction rollback.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>See the description of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">rollbackForClassName</span></span><span class=\\"token punctuation\\">}</span> for further\\n     * information on how the specified names are treated.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Similar to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">NoRollbackRuleAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">NoRollbackRuleAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> exceptionName<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>.\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">noRollbackFor</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>transaction<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DefaultTransactionAttribute</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rollbackOn</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">)</span></span>\\n     */</span>\\n    <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">noRollbackForClassName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{r as comp,d as data};
