import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,d as n,e as a,f as t,b as s}from"./app-BcM_rFa5.js";const c={},d=s(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><blockquote><p>MySQL自带很多函数供我们使用，为我们的查询提供了极大的方便。</p></blockquote><h3 id="math函数" tabindex="-1"><a class="header-anchor" href="#math函数"><span>Math函数</span></a></h3><h4 id="max" tabindex="-1"><a class="header-anchor" href="#max"><span>MAX</span></a></h4><p>求一列的最大值</p><h4 id="min" tabindex="-1"><a class="header-anchor" href="#min"><span>MIN</span></a></h4><p>求一列的最小值</p><h4 id="sum" tabindex="-1"><a class="header-anchor" href="#sum"><span>SUM</span></a></h4><p>求一列的和</p><h4 id="round" tabindex="-1"><a class="header-anchor" href="#round"><span>ROUND</span></a></h4><p>返回离值X最近的数（四舍五入），支持小数位位数</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 四舍五入
SELECT ROUND(1.4) = 1

# 两位小数
SELECT ROUND(1.455，2) = 1.46
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rand" tabindex="-1"><a class="header-anchor" href="#rand"><span>RAND</span></a></h4><p>随机数，范围[0,1)</p><h3 id="字符函数" tabindex="-1"><a class="header-anchor" href="#字符函数"><span>字符函数</span></a></h3><h4 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span>SUBSTR</span></a></h4><p><code>SUBSTR</code>是一个字符函数，类似于Java中的 <code>substring()</code>方法，但略有不同。</p><p>语法，注意在MySQL中 <code>SUBSTR</code>是从1开始的，不是0。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 使用方法1,代表从start开始，截取length长度的字符串
SUBSTR(s, start, length)

# 使用方法2，代表从start开始，截取length长度的字符串
SUBSTR(s FROM start FOR length)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="substring" tabindex="-1"><a class="header-anchor" href="#substring"><span>SUBSTRING</span></a></h4><p>等同于 [SUBSTR]( # SUBSTR)。</p><h4 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>CONCAT</span></a></h4><p>有字符串截取，自然也是有字符串拼接的，在MySQL中的字符串拼接就是 <code>CONCAT(str1,str2...strN)</code>。</p><p><code>CONCAT()</code>函数用于合并多个字符串。</p><h4 id="concat-ws" tabindex="-1"><a class="header-anchor" href="#concat-ws"><span>CONCAT_WS</span></a></h4><p>在拼接字符串时，有时候我们需要添加分隔符。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;how are you&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="left" tabindex="-1"><a class="header-anchor" href="#left"><span>LEFT</span></a></h4><p><code>LEFT</code>是一个字符函数，如 <code>LEFT(&quot;mysql&quot;, 2)</code>表示取字符的前三个字符，即 <code>my</code>。</p><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 从字符串中提取n个字符</span>
<span class="token keyword">LEFT</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，<code>number</code>是可以大于字符长度的，这样取出来的就是整个字符，且字符长度为字符串的长度。</p><p>举个🌰</p><p>上面SQL的结果就是 5 ，而不是10。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> LENGTH<span class="token punctuation">(</span><span class="token keyword">LEFT</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="right" tabindex="-1"><a class="header-anchor" href="#right"><span>RIGHT</span></a></h4><p>参照 [LEFT](# LEFT)。</p><h4 id="lcase" tabindex="-1"><a class="header-anchor" href="#lcase"><span>LCASE</span></a></h4><h4 id="lower" tabindex="-1"><a class="header-anchor" href="#lower"><span>LOWER</span></a></h4><h4 id="upcase" tabindex="-1"><a class="header-anchor" href="#upcase"><span>UPCASE</span></a></h4><h3 id="时间函数" tabindex="-1"><a class="header-anchor" href="#时间函数"><span>时间函数</span></a></h3><h4 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>DATE</span></a></h4><p><code>DATE</code>函数返回一个datetime类型的时间的<strong>年月日</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DATE</span><span class="token punctuation">(</span><span class="token string">&#39;2021-01-01 12:20:00&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2021-01-01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="date-format" tabindex="-1"><a class="header-anchor" href="#date-format"><span>DATE_FORMAT</span></a></h4><p><code>DATE_FORMAT(d,f)</code>日期格式化，两个参数，一个日期，一个format，将日期按照format格式化</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>DATE_FORMAT<span class="token punctuation">(</span><span class="token string">&#39;2021-01-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%Y - %m - %d&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="datediff" tabindex="-1"><a class="header-anchor" href="#datediff"><span>DATEDIFF</span></a></h4><p><code>datediff(d1,d2)</code>，返回两时间之间的天数差（d1 - d2）</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>DATEDIFF<span class="token punctuation">(</span><span class="token string">&#39;2021-01-05 12:20:00&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2021-01-01 12:20:00&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="timediff" tabindex="-1"><a class="header-anchor" href="#timediff"><span>TIMEDIFF</span></a></h4><p><code>TIMEDIFF(t1,t2)</code>，返回两时间差，</p><h4 id="timestampdiff" tabindex="-1"><a class="header-anchor" href="#timestampdiff"><span>TIMESTAMPDIFF</span></a></h4><p><code>TIMESTAMPDIFF(unit,d1,d2)</code>，计算时间差(d2-d1)，按照unit为单位计算</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># unit = DAY ,以天为单位返回</span>
timestampdiff<span class="token punctuation">(</span><span class="token keyword">DAY</span><span class="token punctuation">,</span><span class="token string">&#39;2003-02-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2003-05-01&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># unit = MONTH，以月为单位返回，</span>
TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">MONTH</span><span class="token punctuation">,</span><span class="token string">&#39;2003-02-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2003-05-01&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># unit 还可以等于YEAR、MINUTE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/21953536/1666407897665-aee20eb3-3173-4b2e-8667-113e98be101b.png#averageHue=%230a0a0a&amp;clientId=ud85b59f9-2d5d-4&amp;id=LVEre&amp;originHeight=372&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13745&amp;status=done&amp;style=none&amp;taskId=u521d3a97-a0f7-4a54-aa8b-265e95f4ef4&amp;title=" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="高级函数" tabindex="-1"><a class="header-anchor" href="#高级函数"><span>高级函数</span></a></h3><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>IF</span></a></h4><p><code>IF</code>是一个三元函数，类似于Java的三元表达式，他会计算第一个表达式的结果，如果为真就返回第二个表达式，否则返回第三个。</p><p><strong>语法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 计算express，为真返回v1，否则返回v2</span>
<span class="token keyword">IF</span><span class="token punctuation">(</span>express<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>CASE</span></a></h4><p><code>CASE</code>是MySQL的高级函数之一，其实用类似于Java的case。</p><p><strong>语法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 用法1，简单，机械有一定的限制</span>
<span class="token keyword">CASE</span> expression
    <span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> result1
    <span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> result2
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">WHEN</span> conditionN <span class="token keyword">THEN</span> resultN
    <span class="token keyword">ELSE</span> result
<span class="token keyword">END</span>

<span class="token comment"># 用法2，简单，灵活</span>
<span class="token keyword">CASE</span> 
    <span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>expression1<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> result1
    <span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>expression2<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> result2
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>expressionN<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> resultN
    <span class="token keyword">ELSE</span> result
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于两种使用来说，<code>CASE</code>表示函数的开始，<code>END</code>表示函数的结束。</p><p><strong>用法1</strong></p><p>针对一个表达式的不同值进行匹配，如果 <code>condition1</code>成立则返回 <code>result1</code>，其余情况同理，当没有匹配项，则返回result。</p><p><strong>用法2</strong></p><p>针对多个表达式进行匹配，类似于 <code>if-else</code>，如果 <code>expression1</code>成立则返回 <code>result1</code>，其余情况同理，当没有匹配项，则返回result。</p><p><strong>注意</strong></p><p><code>THEN</code>和 <code>ELSE</code></p><h4 id="dense-rank" tabindex="-1"><a class="header-anchor" href="#dense-rank"><span>DENSE_RANK</span></a></h4><p><code>DENSE_RANK</code>是一个窗口函数，他为分区或结果集中的每一行数据分配排名，且排名没有间隙，如果有多个相同排名的值，那么他们的排名值是相同的。</p><p><strong>语法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span>
    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">[</span>{<span class="token punctuation">,</span><span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>}<span class="token punctuation">]</span>
    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>{<span class="token punctuation">,</span><span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>}<span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>PARTITION BY</code>，将 <code>FROM</code>字句生成的结果按条件分区，该函数应用于每个分区。</li><li><code>ORDER BY</code>，指定每个分区的排序规则。</li></ul><p><strong>实例</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 表Scores</span>
+----+-------+
<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> score <span class="token operator">|</span>
+----+-------+
<span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> <span class="token number">3.50</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> <span class="token number">3.65</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> <span class="token number">4.00</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> <span class="token number">3.85</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">5</span>  <span class="token operator">|</span> <span class="token number">4.00</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">6</span>  <span class="token operator">|</span> <span class="token number">3.65</span>  <span class="token operator">|</span>
+----+-------+

<span class="token comment"># SQL</span>
SELECT score,DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> OVER <span class="token punctuation">(</span>ORDER BY score DESC<span class="token punctuation">)</span> <span class="token string">&#39;rank&#39;</span>
FROM Scores
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/21953536/1666407897663-3d62b17d-fbc0-4879-956c-adbfb962d043.png#averageHue=%23f5f3f1&amp;clientId=ud85b59f9-2d5d-4&amp;id=yHqxU&amp;originHeight=180&amp;originWidth=134&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4177&amp;status=done&amp;style=none&amp;taskId=u165314f2-ee6d-4dc5-b755-9a92d5e9fac&amp;title=" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="自建函数" tabindex="-1"><a class="header-anchor" href="#自建函数"><span>自建函数</span></a></h2>`,79),r=n("p",null,"MySQL自带很多函数，这些函数在我们查询时提供了很大的帮助，但是由于我们业务场景的不同，MySQL不可能会兼顾到所有的业务场景，所以它提供了自建函数（CREATE FUNCTION）给我们使用。",-1),u={href:"https://blog.csdn.net/weixin_45866849/article/details/119719547",target:"_blank",rel:"noopener noreferrer"},m=s(`<h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> function_name <span class="token punctuation">(</span> <span class="token punctuation">[</span>function_parameter<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment">//括号是必须的，参数是可选的</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">type</span>
<span class="token punctuation">[</span> characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> routine_body
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>function_name：自建函数名称</li><li>function_parameter：自建函数的参数，可选，还可以设置是输入参数还是输出参数，用 IN 、OUT、INOUT表示，IN：表示输入参数，OUT：表示输出参数，INOUT：表示既可以输入也可以输出。</li><li>type：返回值类型</li><li>characteristic：指定该函数的特性，</li><li>routine_body：函数体</li></ul><p>characteristic的取值为</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>language sql</td><td>说明routine_body部分是由SQL语句组成的，当前系统支持的语言为SQL</td></tr><tr><td>[not] deterministic</td><td>指明存储过程执行的结果是否确定。DETERMINISTIC 表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。</td></tr><tr><td>{contains sql \\no sql \\ reads sql data \\modifies sql data}</td><td>指明子程序使用SQL语句的限制。CONTAINS SQL表明子程序包含SQL语句，但是不包含读写数据的语句；NO SQL表明子程序不包含SQL语句；READS SQL DATA：说明子程序包含读数据的语句；MODIFIES SQL DATA表明子程序包含写数据的语句。默认情况下，系统会指定为CONTAINS SQL。</td></tr><tr><td>sql_security{definer\\invoker}</td><td>指明谁有权限来执行。DEFINER 表示只有定义者才能执行；INVOKER 表示拥有权限的调用者可以执行。默认情况下，系统指定为DEFINER。</td></tr><tr><td>comment &#39;string&#39;</td><td>注释信息，可以用来描述存储过程或函数</td></tr></tbody></table>`,5),v={href:"https://juejin.cn/post/6844903461234933773",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>其实，这个我也不太懂，也没咋用到。</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>在MySQL的函数中，变量的定义是在begin之前定义的，变量的范围旨在该函数中生效。</p><p>举个🌰</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 表Employee</span>
+-------------+------+
<span class="token operator">|</span> Column Name <span class="token operator">|</span> Type <span class="token operator">|</span>
+-------------+------+
<span class="token operator">|</span> <span class="token function">id</span>          <span class="token operator">|</span> int  <span class="token operator">|</span>
<span class="token operator">|</span> salary      <span class="token operator">|</span> int  <span class="token operator">|</span>
+-------------+------+
<span class="token comment"># 函数1</span>
DELIMETER// <span class="token comment"># 声明end的结束符为//，不与MySQL语句的结束符冲突</span>
create <span class="token keyword">function</span> getSalary<span class="token punctuation">(</span>N INT<span class="token punctuation">)</span> returns INT
BEGIN
 DECLARE rt_salary INT<span class="token punctuation">;</span> <span class="token comment"># 声明薪水变量</span>
 SET N:<span class="token operator">=</span>N-1<span class="token punctuation">;</span> // 设置n<span class="token operator">=</span>n-1
 RETURN<span class="token punctuation">(</span>
     <span class="token keyword">select</span> 
         salary
        INTO 
         rt_salary
        from
         Employee
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
END//

<span class="token comment"># 函数2</span>
DELIMETER// <span class="token comment"># 声明end的结束符为//，不与MySQL语句的结束符冲突</span>
create <span class="token keyword">function</span> getSalary<span class="token punctuation">(</span>N INT<span class="token punctuation">)</span> returns INT
BEGIN
 DECLARE rt_salary INT<span class="token punctuation">;</span> <span class="token comment"># 声明薪水变量</span>

    <span class="token keyword">select</span> 
        salary
    INTO 
        rt_salary
    from
        Employee<span class="token punctuation">;</span>
  
    RETURN rt_salary<span class="token punctuation">;</span>
END//
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function h(b,g){const e=p("ExternalLinkIcon");return o(),l("div",null,[d,n("blockquote",null,[r,n("p",null,[a("参考："),n("a",u,[a("https://blog.csdn.net/weixin_45866849/article/details/119719547"),t(e)])])]),m,n("p",null,[a("表链接源："),n("a",v,[a("https://juejin.cn/post/6844903461234933773"),t(e)])]),k])}const E=i(c,[["render",h],["__file","mysql函数.html.vue"]]),T=JSON.parse('{"path":"/posts/notes/MySQL/mysql%E5%87%BD%E6%95%B0.html","title":"函数","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2021-03-17T00:00:00.000Z","category":["mysql"],"title":"函数","description":"函数 MySQL自带很多函数供我们使用，为我们的查询提供了极大的方便。 Math函数 MAX 求一列的最大值 MIN 求一列的最小值 SUM 求一列的和 ROUND 返回离值X最近的数（四舍五入），支持小数位位数 RAND 随机数，范围[0,1) 字符函数 SUBSTR SUBSTR是一个字符函数，类似于Java中的 substring()方法，但略有...","head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/MySQL/mysql%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数 MySQL自带很多函数供我们使用，为我们的查询提供了极大的方便。 Math函数 MAX 求一列的最大值 MIN 求一列的最小值 SUM 求一列的和 ROUND 返回离值X最近的数（四舍五入），支持小数位位数 RAND 随机数，范围[0,1) 字符函数 SUBSTR SUBSTR是一个字符函数，类似于Java中的 substring()方法，但略有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2022/png/21953536/1666407897665-aee20eb3-3173-4b2e-8667-113e98be101b.png#averageHue=%230a0a0a&clientId=ud85b59f9-2d5d-4&id=LVEre&originHeight=372&originWidth=494&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13745&status=done&style=none&taskId=u521d3a97-a0f7-4a54-aa8b-265e95f4ef4&title="}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:49:16.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"函数"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:published_time","content":"2021-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:49:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2022/png/21953536/1666407897665-aee20eb3-3173-4b2e-8667-113e98be101b.png#averageHue=%230a0a0a&clientId=ud85b59f9-2d5d-4&id=LVEre&originHeight=372&originWidth=494&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13745&status=done&style=none&taskId=u521d3a97-a0f7-4a54-aa8b-265e95f4ef4&title=\\",\\"https://cdn.nlark.com/yuque/0/2022/png/21953536/1666407897663-3d62b17d-fbc0-4879-956c-adbfb962d043.png#averageHue=%23f5f3f1&clientId=ud85b59f9-2d5d-4&id=yHqxU&originHeight=180&originWidth=134&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4177&status=done&style=none&taskId=u165314f2-ee6d-4dc5-b755-9a92d5e9fac&title=\\"],\\"datePublished\\":\\"2021-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:49:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"Math函数","slug":"math函数","link":"#math函数","children":[]},{"level":3,"title":"字符函数","slug":"字符函数","link":"#字符函数","children":[]},{"level":3,"title":"时间函数","slug":"时间函数","link":"#时间函数","children":[]},{"level":3,"title":"高级函数","slug":"高级函数","link":"#高级函数","children":[]}]},{"level":2,"title":"自建函数","slug":"自建函数","link":"#自建函数","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]}]}],"git":{"createdTime":1711468156000,"updatedTime":1711468156000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":1}]},"readingTime":{"minutes":5.62,"words":1687},"filePathRelative":"posts/notes/MySQL/mysql函数.md","localizedDate":"March 17, 2021","excerpt":"<h2>函数</h2>\\n<blockquote>\\n<p>MySQL自带很多函数供我们使用，为我们的查询提供了极大的方便。</p>\\n</blockquote>\\n<h3>Math函数</h3>\\n<h4>MAX</h4>\\n<p>求一列的最大值</p>\\n<h4>MIN</h4>\\n<p>求一列的最小值</p>\\n<h4>SUM</h4>\\n<p>求一列的和</p>\\n<h4>ROUND</h4>\\n<p>返回离值X最近的数（四舍五入），支持小数位位数</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code># 四舍五入\\nSELECT ROUND(1.4) = 1\\n\\n# 两位小数\\nSELECT ROUND(1.455，2) = 1.46\\n</code></pre></div>","autoDesc":true}');export{E as comp,T as data};
