import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as l,d as n,e as s,f as e,b as t}from"./app-BcM_rFa5.js";const c={},r=t(`<h3 id="crud" tabindex="-1"><a class="header-anchor" href="#crud"><span>CRUD</span></a></h3><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>INSERT</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 普通插入，不需要指定列名，此时需要列与数据的类型和数量全匹配</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token keyword">VALUE</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>

<span class="token comment"># 等同于，VALUE &lt;==&gt; VALUES，只是VALUES效率更高，你可以试试</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>

<span class="token comment"># 指定字段插入I，</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> fieldN<span class="token punctuation">)</span> 
 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>
 
<span class="token comment"># 指定字段插入II</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token keyword">SET</span> field1<span class="token operator">=</span>value1<span class="token punctuation">,</span>field2<span class="token operator">=</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldN<span class="token operator">=</span>valueN<span class="token punctuation">;</span>

<span class="token comment"># 一次插入多条数据，尽量指定需要插入的列明</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> fieldN<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>，<span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>，<span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>主键自增是不用主动插入数据的，但是再插入时不能指定自增的id主键，不然会报不匹配。</p></blockquote><p>进阶用法</p><ul><li>表明使用\`\`包裹</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 将表名用 \`\` 符号包起来</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样当我们<strong>表名</strong>（table name）较复杂时也不会出现因<strong>表名</strong>而引起的错误</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113170630.png#id=uBBI9&amp;originHeight=335&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>导入历史数据</li></ul><blockquote><p>在实际开发过程中，会产生很多历史数据，且很多历史数据都不会经常用到，此时如果不对历史数据做处理，我们的数据库会越来越大，性能会越来越低，所以我们需要将一部分历史数据导出。</p><p>假设有表exam_record，数据如下</p><p>id    uid  eid create_date last_date   score</p><p>12 111 1111 2020-01-02 09:21:01 2020-01-02 09:21:01 10 13 111 1111 2020-01-02 09:21:01 2020-01-02 09:21:01 10 14 111 1111 2020-01-02 09:21:01 2020-01-02 09:21:01 10 15 111 1111 2020-01-02 09:21:01 2020-01-02 09:21:01 10 16 111 1111 2020-01-02 09:21:01 2020-01-02 09:21:01 10 4 1002 9001 2021-05-02 10:01:01 2021-05-02 10:30:01 81 5 1002 9002 2021-09-02 12:01:01 3 1002 9003 2022-04-22 16:56:58 2022-04-22 16:56:58 50</p></blockquote><p>现在将创建日期在2021年及之前的数据放到history_exam_record表中。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 将2021年以前的数据导入历史表，</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> history_exam_record <span class="token punctuation">(</span>uid<span class="token punctuation">,</span> eid<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> last_date<span class="token punctuation">,</span> score<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> uid<span class="token punctuation">,</span> eid<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> last_date<span class="token punctuation">,</span> score
<span class="token keyword">FROM</span> exam_record <span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>create_date<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220422171113.png#id=jNhn9&amp;originHeight=244&amp;originWidth=923&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>带更新的插入</li></ul><blockquote><p>我们在插入时，有时会遇到id主键相同的插入，一般情况下，我们会重新声明一个不一样的id主键，但是有时候，需要我们覆盖原数据，并插入新数据，此时我们就需要使用 <code>REPLACE</code></p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">REPLACE</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> fieldN<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valueN<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>SELECT</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">OFFSET</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>WHERE</code>：可选参数，设置筛选条件，详情可查看 [WHERE](# WHERE)。</p><p><code>LIMIT</code>：可选参数，限制筛选数目，详情可看 [LIMIT](# LIMIT)。</p><ul><li>一个参数N：表示从0开始的N个符合条件的数据</li><li>两个参数N，M：表示从N开始的M个符合条件的数据</li></ul></blockquote><blockquote><p><code>OFFSET</code>：可选参数，偏移量，配合 <code>LIMIT</code>使用</p></blockquote><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>DELETE</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>如果没有指定 <code>WHERE</code> 子句，<code>MySQL</code> 表中的所有记录将被删除。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件，删除符合指定条件的数据。</li><li>您可以在单个表中一次性删除记录。</li></ul></blockquote><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>UPDATE</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>new_value<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>new_value<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul></blockquote><h4 id="truncate" tabindex="-1"><a class="header-anchor" href="#truncate"><span>TRUNCATE</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token punctuation">[</span><span class="token keyword">TABLE</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们都知道，删除表需要使用 <code>DELETE</code>语法，但是如果需要我们删除表中所有数据的同时还要重置自增主键的话，<code>DELETE</code>已经力不从心了，虽然他能删除表中所有数据，但是他不能重置自增主键，此时我们就需要引入 <code>TRUNCATE</code>，他专门用于重置表，且速度比 <code>DELETE</code>快。</p><h4 id="limit" tabindex="-1"><a class="header-anchor" href="#limit"><span>LIMIT</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> counts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>offset：起始位置，即偏移量，如 <code>offset=1</code>，那么就从查询的结果中第1位开始取，可选参数</li><li>counts：记录数，</li></ul><p>上面两个参数只接受正整数，且不支持运算。</p><p>当使用一个参数<strong>N</strong>时，会返回从<strong>0</strong>到<strong>N</strong>之间的所有行数据，如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时数据库会返回前十条数据，如果数据库中的数据量小于十条则返回所有行数据。</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113172205.png#id=aFmCL&amp;originHeight=189&amp;originWidth=727&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当使用两个参数<strong>N</strong>，<strong>M</strong>时，会返回从<strong>N</strong>开始的<strong>M</strong>行数据，如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时会返回从0开始的10条数据，不足则全部返回。</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113172157.png#id=ExpK6&amp;originHeight=404&amp;originWidth=759&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>WHERE</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">AND</span><span class="token operator">/</span><span class="token operator">OR</span> <span class="token operator">&lt;</span>条件<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">AND</span><span class="token operator">/</span><span class="token operator">OR</span> <span class="token operator">&lt;</span>条件<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>WHERE</code> 子句可拼接到其他语句中，但不建议语句过于复杂。</p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用 <code>WHERE</code>语句来设定查询条件。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li><code>WHERE</code> 子句也可以运用于 <code>SQL</code> 的 <code>DELETE</code> 或者 <code>UPDATE</code> 命令。</li><li><code>WHERE</code> 子句类似于程序语言中的 <code>if</code> 条件，根据 <code>MySQL</code> 表中的字段值来读取指定的数据。</li></ul></blockquote><blockquote><p><code>MySQL</code> 的 <code>WHERE</code> 子句的字符串比较是不区分大小写的。 你可以使用 <code>BINARY</code> 关键字来设定 <code>WHERE</code> 子句的字符串比较是区分大小写的。</p></blockquote><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>等号，检测两个值是否相等，如果相等返回true</td><td>(A = B) 返回false。</td></tr><tr><td>&lt;&gt; !=</td><td>不等于，检测两个值是否相等，如果不相等返回true</td><td>(A != B) 返回 true。</td></tr><tr><td>&gt;</td><td>大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td>(A &gt; B) 返回false。</td></tr><tr><td>&lt;</td><td>小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td>(A&lt; B) 返回 true。</td></tr><tr><td>&gt;=</td><td>大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td>(A &gt;= B) 返回false。</td></tr><tr><td>&lt;=</td><td>小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td>(A&lt;= B) 返回 true。</td></tr></tbody></table><h4 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span>DISTINCT</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名称<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>DISTINCT</code> 用于返回一列中 所有 的 唯一的值，即去重。</p></blockquote><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114083113.png#id=AIkdj&amp;originHeight=149&amp;originWidth=607&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意，去重是按照多个列为一组数据去对比，比如DISTINCT后面跟了两个列名，那么对比时是需要两个都不相等才算不重复。</p><p>如下</p></blockquote><p>数据：</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220425170154.png#id=dqXAx&amp;originHeight=308&amp;originWidth=189&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>SQL：SELECT DISTINCT uid,exam_id FROM exam_record</p></blockquote><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220425170137.png#id=QMKWQ&amp;originHeight=327&amp;originWidth=373&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果想要单独取一列不带重复需要用括号，</p><blockquote><p>SQL：</p></blockquote><h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>ORDER BY</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>colum_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>ORDER BY 语句用于对结果集进行排序。</strong></p><p><code>ORDER BY</code> 语句用于根据指定的列对结果集进行排序。</p><p><code>ORDER BY</code> 语句默认按照升序对记录进行排序。</p><p>如果您希望按照降序对记录进行排序，可以使用 <code>DESC</code> 关键字。</p></blockquote><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114083631.png#id=qOLTY&amp;originHeight=437&amp;originWidth=562&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="like" tabindex="-1"><a class="header-anchor" href="#like"><span>LIKE</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldN 
<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>
<span class="token keyword">WHERE</span> field1 <span class="token operator">LIKE</span> condition1 <span class="token punctuation">[</span><span class="token operator">AND</span> <span class="token operator">/</span> <span class="token operator">OR</span><span class="token punctuation">]</span> filed2 <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token string">&#39;somevalue&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE代替等号 <strong>=</strong>。</li><li><code>LIKE</code> 通常与 <strong>%</strong> 一同使用， <code>LIKE</code> 中使用百分号 **%**字符来表示任意字符，类似于UNIX/正则表达式中的 *，更多通配符可查看 [正则表达式](# 正则表达式)。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li>你可以在 <code>DELETE</code> 或 <code>UPDATE</code> 命令中使用 <code>WHERE...LIKE</code> 子句来指定条件。</li></ul></blockquote><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114082655.png#id=BNJhb&amp;originHeight=439&amp;originWidth=522&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="top" tabindex="-1"><a class="header-anchor" href="#top"><span>TOP</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># top 后面跟的是数字或百分比，表示前多少个，或前百分之多少个 </span>

<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> number<span class="token operator">/</span><span class="token keyword">percent</span> <span class="token operator">&lt;</span>colum_names<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> table_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>但是，注意 <strong>MySQL不支持TOP</strong>语法。</p><p>但是<strong>MySQL</strong>的 <code>limit</code>等价于<strong>TOP</strong>。</p></blockquote><h4 id="in" tabindex="-1"><a class="header-anchor" href="#in"><span>IN</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>column_names<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>
<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114100459.png#id=Xj2RF&amp;originHeight=441&amp;originWidth=663&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="between" tabindex="-1"><a class="header-anchor" href="#between"><span>BETWEEN</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>column_names<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_names<span class="token operator">&gt;</span>
<span class="token operator">BETWEEN</span> <span class="token operator">&lt;</span>value1<span class="token operator">&gt;</span> <span class="token operator">AND</span> <span class="token operator">&lt;</span>value2<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114101113.png#id=xTqia&amp;originHeight=510&amp;originWidth=726&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>NULL</span></a></h4><blockquote><p>在 <code>MySQL</code>中使用 <code>SELECT</code>以及 <code>WHERE</code>来读取数据表中的数据，但是当提供的查询条件为 <code>NULL</code>时，该命令可能无法正常工作。</p><p>关于 <code>NULL</code>的条件运算符是比较特殊的，不能使用 <code>=NULL</code> 或 <code>！=NULL</code>在列表中查找 <code>NULL</code>值。</p><p>在 <code>MySQL</code>中，<code>NULL</code>值与其他任何值的比较（即使是 <code>NULL</code>）都会返回 <code>NULL</code>，即 <code>NULL=NULL</code>返回 <code>NULL</code>。</p><p>为了解决这个问题，<code>MySQL</code>提供了三大<strong>运算符</strong>：</p><ul><li><strong>IS NULL</strong>：当列的值是 <code>NULL</code>，返回 <code>TRUE</code>。</li><li><strong>IS NOT NULL</strong>：当列的值不是 <code>NULL</code>，返回 <code>TRUE</code>。</li><li><strong>&lt;=&gt;</strong>：比较操作符（不同于 = 运算符），当比较的的两个值相等或者都为 <code>NULL</code> 时返回 <code>true</code>。</li></ul></blockquote><p>举个🌰</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 获取所有数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>

<span class="token comment"># 使用=和！=来过滤，结果显示并没有起作用</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">!=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token comment"># 使用IS NULL和IS NOT NULL 以及 &lt;=&gt;</span>
<span class="token comment"># 找等空列</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">&lt;=&gt;</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment"># 找非空列</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117174303.png#id=jPwVf&amp;originHeight=549&amp;originWidth=718&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117175023.png#id=wXQTQ&amp;originHeight=411&amp;originWidth=694&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>DATE</span></a></h3><p>在MySQL中存在四种不同时的时间类型，默认为DateTime，他会存入 <code>YYYY-MM-DD HH:MM:SS</code>格式的时间。</p><blockquote><p>当我们处理日期时，最难的任务恐怕是确保所插入的日期的格式，与数据库中日期列的格式相匹配。</p><p>只要数据包含的只是日期部分，运行查询就不会出问题。但是，如果涉及时间，情况就有点复杂了。</p><p>MySQL 使用下列数据类型在数据库中存储日期或日期/时间值</p><ul><li>DATE - 格式 YYYY-MM-DD</li><li>DATETIME - 格式: YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS</li><li>YEAR - 格式 YYYY 或 YY</li></ul></blockquote><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h4>`,85),d=n("thead",null,[n("tr",null,[n("th",null,"函数"),n("th",null,"描述")])],-1),u={href:"https://www.w3school.com.cn/sql/func_now.asp",target:"_blank",rel:"noopener noreferrer"},k=n("td",null,"返回当前的日期和时间",-1),m={href:"https://www.w3school.com.cn/sql/func_curdate.asp",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"返回当前的日期",-1),b={href:"https://www.w3school.com.cn/sql/func_curtime.asp",target:"_blank",rel:"noopener noreferrer"},h=n("td",null,"返回当前的时间",-1),v={href:"https://www.w3school.com.cn/sql/func_date.asp",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"提取日期或日期/时间表达式的日期部分",-1),E={href:"https://www.w3school.com.cn/sql/func_extract.asp",target:"_blank",rel:"noopener noreferrer"},w=n("td",null,"返回日期/时间按的单独部分",-1),T={href:"https://www.w3school.com.cn/sql/func_date_add.asp",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,"给日期添加指定的时间间隔",-1),_={href:"https://www.w3school.com.cn/sql/func_date_sub.asp",target:"_blank",rel:"noopener noreferrer"},q=n("td",null,"从日期减去指定的时间间隔",-1),N={href:"https://www.w3school.com.cn/sql/func_datediff_mysql.asp",target:"_blank",rel:"noopener noreferrer"},L=n("td",null,"返回两个日期之间的天数",-1),I={href:"https://www.w3school.com.cn/sql/func_date_format.asp",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"用不同的格式显示日期/时间",-1),S=t(`<p>当我们想截取 <code>年月</code>/<code>月日</code>时，我们可以使用MySQL自带的时间函数：<code>date_format(时间列名,&#39;时间格式&#39;)</code>，如：<code>date_format(N_time,&#39;%m-%d&#39;)</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> N_time<span class="token punctuation">,</span>date_format<span class="token punctuation">(</span>N_time<span class="token punctuation">,</span><span class="token string">&#39;%m-%d&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">time</span> <span class="token keyword">from</span> notice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图：</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20210701230325.png#id=bqNeT&amp;originHeight=157&amp;originWidth=229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>UNION</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> expression1<span class="token punctuation">,</span> expression2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> expression_n
<span class="token keyword">FROM</span> <span class="token keyword">tables</span>
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> conditions<span class="token punctuation">]</span>
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> expression1<span class="token punctuation">,</span> expression2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> expression_n
<span class="token keyword">FROM</span> <span class="token keyword">tables</span>
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> conditions<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>请注意</strong>，<code>UNION</code> 内部的 <code>SELECT</code> 语句必须拥有<strong>相同数量的列</strong>。列也必须拥有<strong>相似的数据类型</strong>。同时，每条 <code>SELECT</code> 语句中的<strong>列的顺序</strong>必须相同。</p><p><code>MySQL UNION</code> 操作符用于连接<strong>两个</strong>以上的 <code>SQL</code>语句的结果组合到一个结果集合中。</p><p>多个 <code>SELECT</code> 语句会删除重复的数据。</p><p>默认地，<code>UNION</code> 操作符选取不同的值。如果允许重复的值，请使用 <code>UNION ALL</code>。</p><p>另外，<code>UNION</code> 结果集中的列名总是等于 <code>UNION</code> 中第一个 <code>SELECT</code> 语句中的列名。</p></blockquote><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114091027.png#id=tPRze&amp;originHeight=367&amp;originWidth=580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>union后的结果</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114091052.png#id=IbyTV&amp;originHeight=497&amp;originWidth=917&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>JOIN</span></a></h3><blockquote><p><strong>join 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。</strong></p></blockquote><p>首先,我们看准备的数据</p><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114113256.png#id=X81cl&amp;originHeight=502&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 查看有学分的学生的学号,姓名,学分</span>
<span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>stu_num<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>stu_name<span class="token punctuation">,</span>stus<span class="token punctuation">.</span>stu_score 
<span class="token keyword">from</span> table_student <span class="token keyword">as</span> stu<span class="token punctuation">,</span>table_score <span class="token keyword">as</span> stus
<span class="token keyword">where</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> stus<span class="token punctuation">.</span>stu_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114105626.png#id=ExE7M&amp;originHeight=210&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下面我们使用 <code>join</code>来完成上面的操作.</p><h4 id="inner-join" tabindex="-1"><a class="header-anchor" href="#inner-join"><span>INNER JOIN</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 筛选两表都符合条件的数据</span>
<span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>stu_num<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>stu_name<span class="token punctuation">,</span>stus<span class="token punctuation">.</span>std_score 
<span class="token keyword">FROM</span> table_student <span class="token keyword">as</span> stu 
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table_score <span class="token keyword">as</span> stus 
<span class="token keyword">ON</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> stus<span class="token punctuation">.</span>stu_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114105956.png#id=pHwVf&amp;originHeight=194&amp;originWidth=1097&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join"><span>LEFT JOIN</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 返回LEFT JOIN 关键字左面表的所有行,并将右表符合条件的数据放在合适的位置</span>
<span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>stu_num<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>stu_name<span class="token punctuation">,</span>stus<span class="token punctuation">.</span>std_score 
<span class="token keyword">FROM</span> table_student <span class="token keyword">as</span> stu 
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table_score <span class="token keyword">as</span> stus 
<span class="token keyword">ON</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> stus<span class="token punctuation">.</span>stu_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114112313.png#id=Omaxb&amp;originHeight=249&amp;originWidth=1082&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="right-join" tabindex="-1"><a class="header-anchor" href="#right-join"><span>RIGHT JOIN</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 返回RIGHT JOIN 关键字右面表的所有行,并将左表符合条件的数据放在合适的位置</span>
<span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>stu_num<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>stu_name<span class="token punctuation">,</span>stus<span class="token punctuation">.</span>std_score 
<span class="token keyword">FROM</span> table_student <span class="token keyword">as</span> stu 
<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> table_score <span class="token keyword">as</span> stus 
<span class="token keyword">ON</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> stus<span class="token punctuation">.</span>stu_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114113023.png#id=cwDBK&amp;originHeight=235&amp;originWidth=1093&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="full-join" tabindex="-1"><a class="header-anchor" href="#full-join"><span>FULL JOIN</span></a></h4><blockquote><p><code>FULL JOIN</code> 称为 <code>FULL OUTER JOIN</code>。但是 <code>MySQL</code>不支持.</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 只要其中某个表存在匹配，FULL JOIN 关键字就会返回行</span>
<span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>stu_num<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>stu_name<span class="token punctuation">,</span>stus<span class="token punctuation">.</span>std_score 
<span class="token keyword">FROM</span> table_student <span class="token keyword">as</span> stu 
<span class="token keyword">FULL</span> <span class="token keyword">JOIN</span> table_score <span class="token keyword">as</span> stus 
<span class="token keyword">ON</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> stus<span class="token punctuation">.</span>stu_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的实验你可以知道,</p><blockquote><ul><li>JOIN: 如果表中有至少一个匹配，则返回行</li><li>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行</li><li>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行</li><li>FULL JOIN: 只要其中一个表中存在匹配，就返回行</li></ul></blockquote><h3 id="view" tabindex="-1"><a class="header-anchor" href="#view"><span>VIEW</span></a></h3><p>视图是基于 <code>SQL</code> 语句的结果集的可视化的表。</p><p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 <code>SQL</code> 函数、<code>WHERE</code> 以及 <code>JOIN</code> 语句，我们也可以提交数据，就像这些来自于某个单一的表。</p><p>**注释：**数据库的设计和结构不会受到视图中的函数、<code>where</code> 或 <code>join</code> 语句的影响。</p><h4 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图"><span>创建视图</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> <span class="token operator">&lt;</span>view_name<span class="token operator">&gt;</span> <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>column_names<span class="token operator">&gt;</span>
<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>
<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desc" tabindex="-1"><a class="header-anchor" href="#desc"><span>DESC</span></a></h3><blockquote><p>对数据进行降序排序，与 <code>sort by</code>一同使用</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># Employee 表：</span>
<span class="token comment"># +----+--------+</span>
<span class="token comment"># | id | salary |</span>
<span class="token comment"># +----+--------+</span>
<span class="token comment"># | 1  | 100    |</span>
<span class="token comment"># | 2  | 200    |</span>
<span class="token comment"># | 3  | 300    |</span>
<span class="token comment"># +----+--------+</span>
<span class="token keyword">SELECT</span> salary 
<span class="token keyword">from</span> Employee
sort <span class="token keyword">by</span> salary <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="destinct" tabindex="-1"><a class="header-anchor" href="#destinct"><span>DESTINCT</span></a></h3><blockquote><p>对数据进行去重处理，用在列明之前</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># Employee 表：</span>
<span class="token comment"># +----+--------+</span>
<span class="token comment"># | id | salary |</span>
<span class="token comment"># +----+--------+</span>
<span class="token comment"># | 1  | 100    |</span>
<span class="token comment"># | 2  | 200    |</span>
<span class="token comment"># | 3  | 200    |</span>
<span class="token comment"># +----+--------+</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> salary 
<span class="token keyword">from</span> Employee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="临时表" tabindex="-1"><a class="header-anchor" href="#临时表"><span>临时表</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLE</span> SalesSummary <span class="token punctuation">(</span>
     product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
     total_sales <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0.00</span><span class="token punctuation">,</span> 
     avg_unit_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0.00</span><span class="token punctuation">,</span> 
     total_units_sold <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>`,46);function x(O,H){const a=p("ExternalLinkIcon");return i(),l("div",null,[r,n("table",null,[d,n("tbody",null,[n("tr",null,[n("td",null,[n("a",u,[s("NOW()"),e(a)])]),k]),n("tr",null,[n("td",null,[n("a",m,[s("CURDATE()"),e(a)])]),g]),n("tr",null,[n("td",null,[n("a",b,[s("CURTIME()"),e(a)])]),h]),n("tr",null,[n("td",null,[n("a",v,[s("DATE()"),e(a)])]),y]),n("tr",null,[n("td",null,[n("a",E,[s("EXTRACT()"),e(a)])]),w]),n("tr",null,[n("td",null,[n("a",T,[s("DATE_ADD()"),e(a)])]),f]),n("tr",null,[n("td",null,[n("a",_,[s("DATE_SUB()"),e(a)])]),q]),n("tr",null,[n("td",null,[n("a",N,[s("DATEDIFF()"),e(a)])]),L]),n("tr",null,[n("td",null,[n("a",I,[s("DATE_FORMAT()"),e(a)])]),R])])]),S])}const A=o(c,[["render",x],["__file","mysql基础命令.html.vue"]]),M=JSON.parse('{"path":"/posts/notes/MySQL/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.html","title":"基础命令","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2021-03-17T00:00:00.000Z","category":["mysql"],"title":"基础命令","description":"CRUD INSERT 主键自增是不用主动插入数据的，但是再插入时不能指定自增的id主键，不然会报不匹配。 进阶用法 表明使用``包裹 这样当我们表名（table name）较复杂时也不会出现因表名而引起的错误 导入历史数据 在实际开发过程中，会产生很多历史数据，且很多历史数据都不会经常用到，此时如果不对历史数据做处理，我们的数据库会越来越大，性能会越...","head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/MySQL/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"基础命令"}],["meta",{"property":"og:description","content":"CRUD INSERT 主键自增是不用主动插入数据的，但是再插入时不能指定自增的id主键，不然会报不匹配。 进阶用法 表明使用``包裹 这样当我们表名（table name）较复杂时也不会出现因表名而引起的错误 导入历史数据 在实际开发过程中，会产生很多历史数据，且很多历史数据都不会经常用到，此时如果不对历史数据做处理，我们的数据库会越来越大，性能会越..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113170630.png#id=uBBI9&originHeight=335&originWidth=1079&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:49:16.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"基础命令"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:published_time","content":"2021-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:49:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础命令\\",\\"image\\":[\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113170630.png#id=uBBI9&originHeight=335&originWidth=1079&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220422171113.png#id=jNhn9&originHeight=244&originWidth=923&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113172205.png#id=aFmCL&originHeight=189&originWidth=727&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220113172157.png#id=ExpK6&originHeight=404&originWidth=759&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114083113.png#id=AIkdj&originHeight=149&originWidth=607&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220425170154.png#id=dqXAx&originHeight=308&originWidth=189&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220425170137.png#id=QMKWQ&originHeight=327&originWidth=373&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114083631.png#id=qOLTY&originHeight=437&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114082655.png#id=BNJhb&originHeight=439&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114100459.png#id=Xj2RF&originHeight=441&originWidth=663&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114101113.png#id=xTqia&originHeight=510&originWidth=726&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117174303.png#id=jPwVf&originHeight=549&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220117175023.png#id=wXQTQ&originHeight=411&originWidth=694&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20210701230325.png#id=bqNeT&originHeight=157&originWidth=229&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114091027.png#id=tPRze&originHeight=367&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114091052.png#id=IbyTV&originHeight=497&originWidth=917&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114113256.png#id=X81cl&originHeight=502&originWidth=536&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114105626.png#id=ExE7M&originHeight=210&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114105956.png#id=pHwVf&originHeight=194&originWidth=1097&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114112313.png#id=Omaxb&originHeight=249&originWidth=1082&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://masuo-github-image.oss-cn-beijing.aliyuncs.com/image/20220114113023.png#id=cwDBK&originHeight=235&originWidth=1093&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\"],\\"datePublished\\":\\"2021-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:49:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":3,"title":"CRUD","slug":"crud","link":"#crud","children":[]},{"level":3,"title":"DATE","slug":"date","link":"#date","children":[]},{"level":3,"title":"UNION","slug":"union","link":"#union","children":[]},{"level":3,"title":"JOIN","slug":"join","link":"#join","children":[]},{"level":3,"title":"VIEW","slug":"view","link":"#view","children":[]},{"level":3,"title":"DESC","slug":"desc","link":"#desc","children":[]},{"level":3,"title":"DESTINCT","slug":"destinct","link":"#destinct","children":[]},{"level":3,"title":"临时表","slug":"临时表","link":"#临时表","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1711468156000,"updatedTime":1711468156000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":1}]},"readingTime":{"minutes":12.92,"words":3876},"filePathRelative":"posts/notes/MySQL/mysql基础命令.md","localizedDate":"March 17, 2021","excerpt":"<h3>CRUD</h3>\\n<h4>INSERT</h4>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\"># 普通插入，不需要指定列名，此时需要列与数据的类型和数量全匹配</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> table_name <span class=\\"token keyword\\">VALUE</span> <span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 等同于，VALUE &lt;==&gt; VALUES，只是VALUES效率更高，你可以试试</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> table_name <span class=\\"token keyword\\">VALUES</span> <span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 指定字段插入I，</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> table_name <span class=\\"token punctuation\\">(</span>field1<span class=\\"token punctuation\\">,</span> field2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> fieldN<span class=\\"token punctuation\\">)</span> \\n <span class=\\"token keyword\\">VALUES</span> <span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\"># 指定字段插入II</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> table_name <span class=\\"token keyword\\">SET</span> field1<span class=\\"token operator\\">=</span>value1<span class=\\"token punctuation\\">,</span>field2<span class=\\"token operator\\">=</span>value2<span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>fieldN<span class=\\"token operator\\">=</span>valueN<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\"># 一次插入多条数据，尽量指定需要插入的列明</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> table_name <span class=\\"token punctuation\\">(</span>field1<span class=\\"token punctuation\\">,</span> field2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> fieldN<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">VALUES</span> <span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span>，<span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span>，<span class=\\"token punctuation\\">(</span>value1<span class=\\"token punctuation\\">,</span> value2<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">,</span> valueN<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n</code></pre></div>","autoDesc":true}');export{A as comp,M as data};
