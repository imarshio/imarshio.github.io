import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,b as a}from"./app-BcM_rFa5.js";const e={},d=a('<blockquote><p>MySQL中定义的数据字段的类型对优化数据库非常重要。</p></blockquote><p>MySQL支持多种数据类型，大致可分为三种</p><ul><li>数值</li><li>日期</li><li>字符串</li></ul><h3 id="数值型" tabindex="-1"><a class="header-anchor" href="#数值型"><span>数值型</span></a></h3><p>MySQL支持所有标准SQL数值数据类型。 <strong>严格数值数据类型</strong>：INTEGER、SMALLINT、DECIMAL、NUMERIC <strong>近似数值数据类型</strong>：FLOAT、REAL、DOUBLE PRECISION 也支持整数类型 TINYINT、MEDIUMINT 、 BIGINT</p><p>1 Byte = 1 byte = 1B = 1字节 = 8 bit = 8位</p><p>1KB = 1024B</p><p>1 字符 = 多个字节</p><p>在UTF8中，一个英文字符占一个字节，一个汉字占三个字节。</p><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 Bytes</td><td>1字节</td><td>(-128，127)</td><td>(0，255)</td></tr><tr><td>SMALLINT</td><td>2 Bytes</td><td>2字节</td><td>(-32 768，32 767)</td><td>(0，65 535)</td></tr><tr><td>MEDIUMINT</td><td>3 Bytes</td><td>3字节</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td></tr><tr><td>INT或INTEGER</td><td>4 Bytes</td><td>4字节</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td></tr><tr><td>BIGINT</td><td>8 Bytes</td><td>8字节</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td></tr><tr><td>FLOAT</td><td>4 Bytes</td><td>4字节</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td></tr><tr><td>DOUBLE</td><td>8 Bytes</td><td>8字节</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><h3 id="日期型" tabindex="-1"><a class="header-anchor" href="#日期型"><span>日期型</span></a></h3><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。 每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的MySQL不能表示的值时使用&quot;零&quot;值。 TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th>类型</th><th>大小 ( bytes)</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>&#39;-838:59:59&#39;/&#39;838:59:59&#39;</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00结束时间是第<strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>DATE</span></a></h4><p>DATE类型不支持函数化的默认初始值，其默认值必须是一个常量。 DATETIME，支持NOW()、CURRENT_TIMESTAMP</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> db_time<span class="token punctuation">(</span>\n<span class="token identifier"><span class="token punctuation">`</span>date_init_1<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span><span class="token comment">//1</span>\n<span class="token identifier"><span class="token punctuation">`</span>date_init_2<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>date_init_3<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>datetime_init_1<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>datetime_init_2<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>datetime_init_2<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span><span class="token comment">//1 等价于使用 now()</span>\n <span class="token comment"># 在使用timestamp时，默认值已经设为了CURRENT_TIMESTAMP</span>\n<span class="token identifier"><span class="token punctuation">`</span>timestamp_init_1<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>timestamp_init_2<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>timestamp_init_3<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span><span class="token operator">/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><blockquote><p>也称文本类,无特殊说明存储的都是字符.</p><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。</p><p>char(n) 和 varchar(n) 中括号中 n 代表<strong>字符</strong>的个数，并不代表<strong>字节</strong>个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p></blockquote><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>CHAR(size)</td><td>保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td></tr><tr><td>VARCHAR(size)</td><td>保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。</td></tr><tr><td>TINYTEXT</td><td>存放最大长度为 255 个字符的字符串。</td></tr><tr><td>TEXT</td><td>存放最大长度为 65,535 个字符的字符串。</td></tr><tr><td>BLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。</td></tr><tr><td>MEDIUMTEXT</td><td>存放最大长度为 16,777,215 个字符的字符串。</td></tr><tr><td>MEDIUMBLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。</td></tr><tr><td>LONGTEXT</td><td>存放最大长度为 4,294,967,295 个字符的字符串。</td></tr><tr><td>LONGBLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td></tr><tr><td>ENUM(x,y,z,etc.)</td><td>允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。注释：这些值是按照你输入的顺序存储的。可以按照此格式输入可能的值：ENUM(&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;)</td></tr><tr><td>SET</td><td>与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。</td></tr></tbody></table><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>NULL</span></a></h3><blockquote><p>数据库对于 <code>null</code>有额外的处理方式，因为一般的命令对NULL可能不在生效。</p></blockquote><ul><li>IS NULL：当列值为 <code>null</code>时，会返回true</li><li>IS NOT NULL：当列值不为 <code>null</code>时，会返回true</li><li>&lt;=&gt;：当比较的两个值相等或都为 <code>null</code>时，返回true</li></ul>',22),o=[d];function p(i,l){return n(),s("div",null,o)}const E=t(e,[["render",p],["__file","mysql数据类型.html.vue"]]),T=JSON.parse('{"path":"/posts/notes/MySQL/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"数据类型","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2021-03-17T00:00:00.000Z","category":["mysql"],"title":"数据类型","description":"MySQL中定义的数据字段的类型对优化数据库非常重要。 MySQL支持多种数据类型，大致可分为三种 数值 日期 字符串 数值型 MySQL支持所有标准SQL数值数据类型。 严格数值数据类型：INTEGER、SMALLINT、DECIMAL、NUMERIC 近似数值数据类型：FLOAT、REAL、DOUBLE PRECISION 也支持整数类型 TINY...","head":[["meta",{"property":"og:url","content":"https://imarshio.github.io/posts/notes/MySQL/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"MySQL中定义的数据字段的类型对优化数据库非常重要。 MySQL支持多种数据类型，大致可分为三种 数值 日期 字符串 数值型 MySQL支持所有标准SQL数值数据类型。 严格数值数据类型：INTEGER、SMALLINT、DECIMAL、NUMERIC 近似数值数据类型：FLOAT、REAL、DOUBLE PRECISION 也支持整数类型 TINY..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:49:16.000Z"}],["meta",{"property":"article:author","content":"Marshio"}],["meta",{"property":"article:published_time","content":"2021-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:49:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:49:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marshio\\",\\"url\\":\\"https://marshio.com\\"}]}"]]},"headers":[{"level":3,"title":"数值型","slug":"数值型","link":"#数值型","children":[]},{"level":3,"title":"日期型","slug":"日期型","link":"#日期型","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"NULL","slug":"null","link":"#null","children":[]}],"git":{"createdTime":1711468156000,"updatedTime":1711468156000,"contributors":[{"name":"marshio","email":"marshioman@gmail.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1459},"filePathRelative":"posts/notes/MySQL/mysql数据类型.md","localizedDate":"March 17, 2021","excerpt":"<blockquote>\\n<p>MySQL中定义的数据字段的类型对优化数据库非常重要。</p>\\n</blockquote>\\n<p>MySQL支持多种数据类型，大致可分为三种</p>\\n<ul>\\n<li>数值</li>\\n<li>日期</li>\\n<li>字符串</li>\\n</ul>\\n<h3>数值型</h3>\\n<p>MySQL支持所有标准SQL数值数据类型。\\n<strong>严格数值数据类型</strong>：INTEGER、SMALLINT、DECIMAL、NUMERIC\\n<strong>近似数值数据类型</strong>：FLOAT、REAL、DOUBLE PRECISION\\n也支持整数类型 TINYINT、MEDIUMINT 、 BIGINT</p>","autoDesc":true}');export{E as comp,T as data};
